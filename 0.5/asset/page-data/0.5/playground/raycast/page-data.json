{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.5/playground/raycast","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\", \"@oasis-engine/controls\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"), require(\"@oasis-engine/controls\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine, global[\"@oasisEngine/controls\"]);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine, _controls) {\n  \"use strict\";\n\n  /**\n   * @title Raycast\n   * @category Physics\n   */\n\n  /**\n   * 本示例展示如何使用几何体渲染器功能、如何创建几何体资源对象、如何创建材质对象\n   */\n  var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n  engine.canvas.resizeByClientSize();\n  var scene = engine.sceneManager.activeScene;\n  var rootEntity = scene.createRootEntity(\"root\");\n  scene.ambientLight.diffuseSolidColor.setValue(1, 1, 1, 1);\n  scene.ambientLight.diffuseIntensity = 1.2; // init camera\n\n  var cameraEntity = rootEntity.createChild(\"camera\");\n  var camera = cameraEntity.addComponent(_oasisEngine.Camera);\n  cameraEntity.transform.setPosition(10, 10, 10);\n  cameraEntity.addComponent(_controls.OrbitControl); // init point light\n\n  var lightEntity = rootEntity.createChild(\"light\");\n  lightEntity.transform.setPosition(0, 3, 0);\n  var pointLight = lightEntity.addComponent(_oasisEngine.PointLight);\n  pointLight.intensity = 0.3; // create sphere test entity\n\n  var radius = 1.25;\n  var sphereEntity = rootEntity.createChild(\"SphereEntity\");\n  sphereEntity.transform.setPosition(-3, 0, 0);\n  var sphereMtl = new _oasisEngine.BlinnPhongMaterial(engine);\n  var sphereRenderer = sphereEntity.addComponent(_oasisEngine.MeshRenderer);\n  sphereMtl.baseColor.setValue(0.7, 0.1, 0.1, 1.0);\n  sphereRenderer.mesh = _oasisEngine.PrimitiveMesh.createSphere(engine, radius);\n  sphereRenderer.setMaterial(sphereMtl);\n  var sphereCollider = sphereEntity.addComponent(_oasisEngine.SphereCollider);\n  sphereCollider.setSphere(new _oasisEngine.Vector3(), radius); // create box test entity\n\n  var cubeSize = 2.0;\n  var boxEntity = rootEntity.createChild(\"BoxEntity\");\n  var boxMtl = new _oasisEngine.BlinnPhongMaterial(engine);\n  var boxRenderer = boxEntity.addComponent(_oasisEngine.MeshRenderer);\n  boxMtl.baseColor.setValue(0.1, 0.7, 0.1, 1.0);\n  boxRenderer.mesh = _oasisEngine.PrimitiveMesh.createCuboid(engine, cubeSize, cubeSize, cubeSize);\n  boxRenderer.setMaterial(boxMtl);\n  var boxCollider = boxEntity.addComponent(_oasisEngine.BoxCollider);\n  boxCollider.setBoxCenterSize(new _oasisEngine.Vector3(), new _oasisEngine.Vector3(cubeSize, cubeSize, cubeSize)); // raycast logic\n\n  var pickedMeshRenderer;\n  var originalColor = new _oasisEngine.Color();\n  var point = new _oasisEngine.Vector2();\n  var ray = new _oasisEngine.Ray();\n  var hit = new _oasisEngine.HitResult();\n  window.addEventListener(\"mousedown\", function (event) {\n    point.setValue(event.pageX * window.devicePixelRatio, event.pageY * window.devicePixelRatio);\n    camera.screenPointToRay(point, ray);\n    var result = engine.physicsManager.raycast(ray, Number.MAX_VALUE, _oasisEngine.Layer.Everything, hit);\n\n    if (result) {\n      pickedMeshRenderer = hit.collider.entity.getComponent(_oasisEngine.MeshRenderer);\n      var material = pickedMeshRenderer.getMaterial();\n      material.baseColor.cloneTo(originalColor);\n      material.baseColor.setValue(0.3, 0.3, 0.3, 1.0);\n    }\n  });\n  window.addEventListener(\"mouseup\", function () {\n    pickedMeshRenderer.getMaterial().baseColor = originalColor;\n  }); // Run engine\n\n  engine.run();\n});"},"name":"raycast","id":"dd365b3f-5fc7-522a-991f-2cecf77d1ba6"}}},"staticQueryHashes":[]}