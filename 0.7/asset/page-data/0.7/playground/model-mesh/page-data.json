{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.7/playground/model-mesh","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine) {\n  \"use strict\";\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  init();\n\n  function init() {\n    // Create engine\n    var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n    engine.canvas.resizeByClientSize(); // Create root entity\n\n    var rootEntity = engine.sceneManager.activeScene.createRootEntity(); // Create camera\n\n    var cameraEntity = rootEntity.createChild(\"Camera\");\n    cameraEntity.transform.setPosition(0, 10, 10);\n    cameraEntity.transform.lookAt(new _oasisEngine.Vector3(0, 8, 0));\n    var camera = cameraEntity.addComponent(_oasisEngine.Camera);\n    camera.farClipPlane = 2000;\n    camera.fieldOfView = 55;\n    createPlane(engine, rootEntity);\n    engine.run();\n  }\n  /**\n   * Create a plane as a child of entity.\n   */\n\n\n  function createPlane(engine, entity) {\n    engine.resourceManager.load({\n      url: \"https://gw.alipayobjects.com/mdn/rms_2e421e/afts/img/A*fRtNTKrsq3YAAAAAAAAAAAAAARQnAQ\",\n      type: _oasisEngine.AssetType.Texture2D\n    }).then(function (texture) {\n      var planeEntity = entity.createChild(\"plane\");\n      var meshRenderer = planeEntity.addComponent(_oasisEngine.MeshRenderer);\n      var material = new _oasisEngine.Material(engine, shader); // planeEntity.transform.setRotation(-90, 0, 0);\n\n      meshRenderer.mesh = _oasisEngine.PrimitiveMesh.createPlane(engine, 1245, 1245, 100, 100, false);\n      meshRenderer.setMaterial(material);\n      planeEntity.addComponent(PlaneAnimation);\n      var shaderData = material.shaderData;\n      shaderData.setTexture(\"u_baseColor\", texture);\n      shaderData.setColor(\"u_fogColor\", new _oasisEngine.Color(0.25, 0.25, 0.25, 1));\n      shaderData.setFloat(\"u_fogDensity\", 0.004);\n      shaderData.setColor(\"u_color\", new _oasisEngine.Color(86 / 255, 182 / 255, 194 / 255, 1));\n    });\n  }\n  /**\n   * Plane animation script.\n   */\n\n\n  var PlaneAnimation = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(PlaneAnimation, _Script);\n\n    function PlaneAnimation() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Script.call.apply(_Script, [this].concat(args)) || this;\n      _this._planeMesh = void 0;\n      _this._initZ = void 0;\n      _this._counter = 0;\n      return _this;\n    }\n\n    var _proto = PlaneAnimation.prototype;\n\n    /**\n     * @override\n     * Called when be enabled first time, only once.\n     */\n    _proto.onAwake = function onAwake() {\n      var renderer = this.entity.getComponent(_oasisEngine.MeshRenderer);\n      var mesh = renderer.mesh;\n      var vertexCount = mesh.vertexCount;\n      var positions = mesh.getPositions();\n      var initY = new Array(vertexCount);\n\n      for (var i = 0; i < vertexCount; i++) {\n        var position = positions[i];\n        position.y += Math.random() * 10 - 10;\n        initY[i] = position.y;\n      }\n\n      this._initZ = initY;\n      this._planeMesh = mesh;\n    }\n    /**\n     * @override\n     * The main loop, called frame by frame.\n     * @param deltaTime - The deltaTime when the script update.\n     */\n    ;\n\n    _proto.onUpdate = function onUpdate(deltaTime) {\n      var mesh = this._planeMesh;\n      var counter = this._counter,\n          initZ = this._initZ;\n      var positions = mesh.getPositions();\n\n      for (var i = 0, n = positions.length; i < n; i++) {\n        var position = positions[i];\n        position.y = Math.sin(i + counter * 0.00002) * (initZ[i] - initZ[i] * 0.6);\n        counter += 0.1;\n      }\n\n      mesh.setPositions(positions);\n      mesh.uploadData(false);\n      this._counter = counter;\n    };\n\n    return PlaneAnimation;\n  }(_oasisEngine.Script);\n\n  var shader = _oasisEngine.Shader.create(\"test-plane\", \"uniform mat4 u_MVPMat;\\n    attribute vec4 POSITION;\\n    attribute vec2 TEXCOORD_0;\\n    \\n    uniform mat4 u_MVMat;\\n    \\n    varying vec2 v_uv;\\n    varying vec3 v_position;\\n    \\n    void main() {\\n      v_uv = TEXCOORD_0;\\n      v_position = (u_MVMat * POSITION).xyz;\\n      gl_Position = u_MVPMat * POSITION;\\n    }\", \"\\n    uniform sampler2D u_baseColor;\\n    uniform vec4 u_color;\\n    uniform vec4 u_fogColor;\\n    uniform float u_fogDensity;\\n    \\n    varying vec2 v_uv;\\n    varying vec3 v_position;\\n    \\n\\n    vec4 linearToGamma(vec4 linearIn){\\n      return vec4( pow(linearIn.rgb, vec3(1.0 / 2.2)), linearIn.a);\\n    }\\n    \\n    void main() {\\n      vec4 color = texture2D(u_baseColor, v_uv) * u_color;\\n      float fogDistance = length(v_position);\\n      float fogAmount = 1. - exp2(-u_fogDensity * u_fogDensity * fogDistance * fogDistance * 1.442695);\\n      fogAmount = clamp(fogAmount, 0., 1.);\\n      gl_FragColor = mix(color, u_fogColor, fogAmount); \\n\\n      #ifndef OASIS_COLORSPACE_GAMMA\\n        gl_FragColor = linearToGamma(gl_FragColor);\\n      #endif\\n    }\\n    \");\n});"},"name":"model-mesh","id":"1477c3bc-6a05-58af-bae5-abe39cd2bb11"}}},"staticQueryHashes":[]}