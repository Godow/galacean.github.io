{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.7/playground/text-renderer","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@oasis-engine/controls\", \"oasis-engine\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@oasis-engine/controls\"), require(\"oasis-engine\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global[\"@oasisEngine/controls\"], global.oasisEngine);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_controls, _oasisEngine) {\n  \"use strict\";\n\n  /**\n   * @title Text Renderer\n   * @category 2D\n   */\n  // Create engine object\n  var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n  engine.canvas.resizeByClientSize();\n  var scene = engine.sceneManager.activeScene;\n  var rootEntity = scene.createRootEntity(); // Create camera\n\n  var cameraEntity = rootEntity.createChild(\"camera_entity\");\n  cameraEntity.transform.setPosition(0, 0, 10);\n  cameraEntity.addComponent(_oasisEngine.Camera);\n  cameraEntity.addComponent(_controls.OrbitControl); // The text to display\n\n  var text = \"Oasis 文字系统来啦～\"; // The position of text\n\n  var pos = new _oasisEngine.Vector3(); // The color of text\n\n  var color = new _oasisEngine.Color(); // Create text with default params\n\n  pos.setValue(0, 1.25, 0);\n  color.setValue(1, 1, 1, 1);\n  createText(); // Create text with cursive font family\n\n  pos.setValue(0, 0.75, 0);\n  color.setValue(1, 1, 1, 1);\n  createText(\"cursive\"); // Create text with font size 36\n\n  pos.setValue(0, 0.25, 0);\n  color.setValue(1, 0.5, 0.5, 1);\n  createText(\"Arial\", 36); // Create text with bold\n\n  pos.setValue(0, -0.25, 0);\n  color.setValue(1, 1, 1, 1);\n  createText(\"Arial\", 26, true); // Create text with italic\n\n  pos.setValue(0, -0.75, 0);\n  color.setValue(1, 1, 1, 1);\n  createText(\"Arial\", 26, false, true); // Create text with bold and italic\n\n  pos.setValue(0, -1.25, 0);\n  color.setValue(1, 1, 1, 1);\n  createText(\"Arial\", 26, true, true);\n  engine.run();\n  /**\n   * Create text to display by params.\n   * @param fontFamily - The font family\n   * @param fontSize - The size of font\n   * @param bold - The text whether bold\n   * @param italic - The text whether italic\n   */\n\n  function createText(fontFamily, fontSize, bold, italic) {\n    if (fontFamily === void 0) {\n      fontFamily = \"Arial\";\n    }\n\n    if (fontSize === void 0) {\n      fontSize = 26;\n    }\n\n    if (bold === void 0) {\n      bold = false;\n    }\n\n    if (italic === void 0) {\n      italic = false;\n    }\n\n    // Create text entity\n    var entity = rootEntity.createChild(\"text\");\n    entity.transform.position = pos; // Add text renderer for text entity\n\n    var renderer = entity.addComponent(_oasisEngine.TextRenderer); // Set text color\n\n    renderer.color = color; // Set text to render\n\n    renderer.text = text; // Set font with font family\n\n    renderer.font = _oasisEngine.Font.createFromOS(entity.engine, fontFamily); // Set font size\n\n    renderer.fontSize = fontSize; // Set font whether bold\n\n    bold && (renderer.fontStyle |= _oasisEngine.FontStyle.Bold); // Set font whether italic\n\n    italic && (renderer.fontStyle |= _oasisEngine.FontStyle.Italic);\n  }\n});"},"name":"text-renderer","id":"711ffcf1-02ec-54c0-adc3-bcdb71b305b3"}}},"staticQueryHashes":[]}