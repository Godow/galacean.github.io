{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.7/playground/ibl-baker","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@oasis-engine/baker\", \"@oasis-engine/controls\", \"dat.gui\", \"oasis-engine\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@oasis-engine/baker\"), require(\"@oasis-engine/controls\"), require(\"dat.gui\"), require(\"oasis-engine\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global[\"@oasisEngine/baker\"], global[\"@oasisEngine/controls\"], global.dat, global.oasisEngine);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_baker, _controls, dat, _oasisEngine) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n\n  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\n  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  /**\n   * @title IBL Baker\n   * @category Material\n   */\n  _oasisEngine.Logger.enable();\n\n  var gui = new dat.GUI(); //-- create engine object\n\n  var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n  engine.canvas.resizeByClientSize();\n  var scene = engine.sceneManager.activeScene;\n  var ambientLight = scene.ambientLight;\n  var rootEntity = scene.createRootEntity(); //Create camera\n\n  var cameraNode = rootEntity.createChild(\"camera_node\");\n  cameraNode.transform.position = new _oasisEngine.Vector3(0, 0, 10);\n  cameraNode.addComponent(_oasisEngine.Camera);\n  cameraNode.addComponent(_controls.OrbitControl);\n  Promise.all([engine.resourceManager.load({\n    urls: [\"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*5bs-Sb80qcUAAAAAAAAAAAAAARQnAQ\", \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*rLUCT4VPBeEAAAAAAAAAAAAAARQnAQ\", \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*LjSHTI5iSPoAAAAAAAAAAAAAARQnAQ\", \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*pgCvTJ85RUYAAAAAAAAAAAAAARQnAQ\", \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*0BKxR6jgRDAAAAAAAAAAAAAAARQnAQ\", \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*Pir4RoxLm3EAAAAAAAAAAAAAARQnAQ\"],\n    type: _oasisEngine.AssetType.TextureCube\n  }), engine.resourceManager.load({\n    url: \"https://gw.alipayobjects.com/os/bmw-prod/10c5d68d-8580-4bd9-8795-6f1035782b94.bin\",\n    // sunset_1K\n    // url: \"https://gw.alipayobjects.com/os/bmw-prod/20d58ffa-c7da-4c54-8980-4efaf91a0239.bin\",// pisa_1K\n    // url: \"https://gw.alipayobjects.com/os/bmw-prod/59b28d9f-7589-4d47-86b0-52c50b973b10.bin\", // footPrint_2K\n    type: \"HDR-RGBE\"\n  })]).then(function (textures) {\n    var ldrCubeMap = textures[0];\n    var hdrCubeMap = textures[1];\n\n    var bakedLDRCubeMap = _baker.IBLBaker.fromTextureCubeMap(ldrCubeMap, _baker.DecodeMode.Gamma);\n\n    var bakedHDRCubeMap = _baker.IBLBaker.fromTextureCubeMap(hdrCubeMap, _baker.DecodeMode.RGBE);\n\n    ambientLight.specularTexture = bakedHDRCubeMap;\n    ambientLight.specularTextureDecodeRGBM = true;\n    var sh = new _oasisEngine.SphericalHarmonics3();\n\n    _baker.SphericalHarmonics3Baker.fromTextureCubeMap(hdrCubeMap, _baker.DecodeMode.RGBE, sh);\n\n    ambientLight.diffuseMode = _oasisEngine.DiffuseMode.SphericalHarmonics;\n    ambientLight.diffuseSphericalHarmonics = sh;\n    engine.run();\n    debugIBL(bakedLDRCubeMap, bakedHDRCubeMap);\n  });\n\n  function debugIBL(bakedLDRCubeMap, bakedHDRCubeMap) {\n    _oasisEngine.Shader.create(\"ibl debug test\", \"\\n      attribute vec3 POSITION;\\n      attribute vec2 TEXCOORD_0;\\n  \\n      uniform mat4 u_MVPMat;\\n      varying vec2 v_uv;\\n  \\n      void main(){\\n        gl_Position = u_MVPMat * vec4(POSITION, 1.0);\\n        v_uv = TEXCOORD_0;\\n    }\\n    \", \"\\n      uniform sampler2D u_env;\\n      uniform int face;\\n      varying vec2 v_uv;\\n  \\n      vec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n       return vec4( value.rgb * value.a * maxRange, 1.0 );\\n       }\\n \\n  \\n      void main(){\\n        vec2 uv = v_uv;\\n        if(face == 2){\\n          uv.x = v_uv.y;\\n          uv.y= 1.0 - v_uv.x;\\n        }else if(face == 3){\\n          uv.x = 1.0 - v_uv.y;\\n          uv.y=  v_uv.x;\\n        }\\n \\n        gl_FragColor = RGBMToLinear(texture2D(u_env, uv), 5.0);\\n  \\n        gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0 / 2.2));\\n      }\\n      \");\n\n    var debugTexture = bakedHDRCubeMap;\n    var size = debugTexture.width; // Create Sphere\n\n    var sphereEntity = rootEntity.createChild(\"box\");\n    sphereEntity.transform.setPosition(-1, 2, 0);\n    var sphereMaterial = new _oasisEngine.PBRMaterial(engine);\n    sphereMaterial.roughness = 0;\n    sphereMaterial.metallic = 1;\n    var renderer = sphereEntity.addComponent(_oasisEngine.MeshRenderer);\n    renderer.mesh = _oasisEngine.PrimitiveMesh.createSphere(engine, 1, 64);\n    renderer.setMaterial(sphereMaterial); // Create planes\n\n    var planes = new Array(6);\n    var planeMaterials = new Array(6);\n\n    for (var i = 0; i < 6; i++) {\n      var bakerEntity = rootEntity.createChild(\"IBL Baker Entity\");\n      bakerEntity.transform.setRotation(90, 0, 0);\n      var bakerMaterial = new _oasisEngine.Material(engine, _oasisEngine.Shader.find(\"ibl debug test\"));\n      bakerMaterial.renderState.rasterState.cullMode = _oasisEngine.CullMode.Off;\n      var bakerRenderer = bakerEntity.addComponent(_oasisEngine.MeshRenderer);\n      bakerRenderer.mesh = _oasisEngine.PrimitiveMesh.createPlane(engine, 2, 2);\n      bakerRenderer.setMaterial(bakerMaterial);\n      planes[i] = bakerEntity;\n      planeMaterials[i] = bakerMaterial;\n    }\n\n    planes[0].transform.setPosition(1, 0, 0); // PX\n\n    planes[1].transform.setPosition(-3, 0, 0); // NX\n\n    planes[2].transform.setPosition(1, 2, 0); // PY\n\n    planes[3].transform.setPosition(1, -2, 0); // NY\n\n    planes[4].transform.setPosition(-1, 0, 0); // PZ\n\n    planes[5].transform.setPosition(3, 0, 0); // NZ\n    //debug\n\n    gui.add(sphereMaterial, \"metallic\", 0, 1, 0.01);\n    gui.add(sphereMaterial, \"roughness\", 0, 1, 0.01);\n\n    function changeMip(mipLevel) {\n      var mipSize = size >> mipLevel;\n\n      for (var _i = 0; _i < 6; _i++) {\n        var material = planeMaterials[_i];\n        var data = new Uint8Array(mipSize * mipSize * 4);\n        var planeTexture = new _oasisEngine.Texture2D(engine, mipSize, mipSize, undefined, false); // no mipmap\n\n        debugTexture.getPixelBuffer(_oasisEngine.TextureCubeFace.PositiveX + _i, 0, 0, mipSize, mipSize, mipLevel, data);\n        planeTexture.setPixelBuffer(data);\n        material.shaderData.setTexture(\"u_env\", planeTexture);\n        material.shaderData.setInt(\"face\", _i);\n      }\n    }\n\n    changeMip(0);\n    var state = {\n      mipLevel: 0,\n      HDR: true\n    };\n    gui.add(state, \"mipLevel\", 0, debugTexture.mipmapCount - 1, 1).onChange(function (mipLevel) {\n      changeMip(mipLevel);\n    });\n    gui.add(state, \"HDR\").onChange(function (v) {\n      if (v) {\n        debugTexture = bakedHDRCubeMap;\n      } else {\n        debugTexture = bakedLDRCubeMap;\n      }\n\n      ambientLight.specularTexture = debugTexture;\n      changeMip(state.mipLevel);\n    });\n  }\n});"},"name":"ibl-baker","id":"3bf01fed-91f9-5807-9013-8603666efc39"}}},"staticQueryHashes":[]}