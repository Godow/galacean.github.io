{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.7/playground/buffer-mesh-independent","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine) {\n  \"use strict\";\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  /**\n   * Script for updating color buffer.\n   */\n  var RandomColorScript = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(RandomColorScript, _Script);\n\n    function RandomColorScript() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Script.call.apply(_Script, [this].concat(args)) || this;\n      _this.colorData = void 0;\n      _this.colorBuffer = void 0;\n      _this._loopCount = 0;\n      return _this;\n    }\n\n    var _proto = RandomColorScript.prototype;\n\n    /**\n     * @override\n     * The main loop, called frame by frame.\n     * @param deltaTime - The deltaTime when the script update.\n     */\n    _proto.onUpdate = function onUpdate(deltaTime) {\n      if (this._loopCount === 30) {\n        var colorData = this.colorData;\n\n        for (var i = 0; i < 6; i++) {\n          var r = Math.random();\n          var g = Math.random();\n          var b = Math.random();\n          var faceOffset = i * 12;\n\n          for (var _i = 0; _i < 4; _i++) {\n            var vertexOffset = _i * 3;\n            colorData[faceOffset + vertexOffset] = r;\n            colorData[faceOffset + vertexOffset + 1] = g;\n            colorData[faceOffset + vertexOffset + 2] = b;\n          }\n        }\n\n        this.colorBuffer.setData(colorData);\n        this._loopCount = 0;\n      }\n\n      this._loopCount++;\n    };\n\n    return RandomColorScript;\n  }(_oasisEngine.Script);\n\n  init();\n\n  function init() {\n    // Create engine and get root entity.\n    var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n    engine.canvas.resizeByClientSize();\n    var rootEntity = engine.sceneManager.activeScene.createRootEntity(\"Root\"); // Create light.\n\n    var lightEntity = rootEntity.createChild(\"pointLight\");\n    var pointLight = lightEntity.addComponent(_oasisEngine.PointLight);\n    pointLight.distance = 10;\n    lightEntity.transform.setPosition(2, 5, 5); // Create camera.\n\n    var cameraEntity = rootEntity.createChild(\"Camera\");\n    cameraEntity.transform.setPosition(0, 6, 10);\n    cameraEntity.transform.lookAt(new _oasisEngine.Vector3(0, 0, 0));\n    cameraEntity.addComponent(_oasisEngine.Camera); // Create custom cube.\n    // Use createCustomMesh() to create custom cube mesh.\n\n    var cubeEntity = rootEntity.createChild(\"Cube\");\n    var cubeRenderer = cubeEntity.addComponent(_oasisEngine.MeshRenderer);\n    var randomColorScript = cubeEntity.addComponent(RandomColorScript);\n    var cubeGeometry = createCustomMesh(engine, 1.0, randomColorScript);\n    var material = new _oasisEngine.BlinnPhongMaterial(engine);\n    cubeEntity.transform.rotate(0, 60, 0);\n    cubeRenderer.mesh = cubeGeometry;\n    cubeRenderer.setMaterial(material); // Run engine.\n\n    engine.run();\n  }\n  /**\n   * Create cube geometry with custom BufferGeometry.\n   * @param engine - Engine\n   * @param size - Cube size\n   * @returns Cube mesh\n   */\n\n\n  function createCustomMesh(engine, size, randomColorScript) {\n    var cubeMesh = new _oasisEngine.BufferMesh(engine, \"CustomCubeMesh\"); // Create vertices position and normal data.\n    // prettier-ignore\n\n    var positionNormals = new Float32Array([// Up\n    -size, size, -size, 0, 1, 0, size, size, -size, 0, 1, 0, size, size, size, 0, 1, 0, -size, size, size, 0, 1, 0, // Down\n    -size, -size, -size, 0, -1, 0, size, -size, -size, 0, -1, 0, size, -size, size, 0, -1, 0, -size, -size, size, 0, -1, 0, // Left\n    -size, size, -size, -1, 0, 0, -size, size, size, -1, 0, 0, -size, -size, size, -1, 0, 0, -size, -size, -size, -1, 0, 0, // Right\n    size, size, -size, 1, 0, 0, size, size, size, 1, 0, 0, size, -size, size, 1, 0, 0, size, -size, -size, 1, 0, 0, // Front\n    -size, size, size, 0, 0, 1, size, size, size, 0, 0, 1, size, -size, size, 0, 0, 1, -size, -size, size, 0, 0, 1, // Back\n    -size, size, -size, 0, 0, -1, size, size, -size, 0, 0, -1, size, -size, -size, 0, 0, -1, -size, -size, -size, 0, 0, -1]); // Create vertices color and init by white.\n\n    var colorData = new Float32Array(3 * 24);\n    colorData.fill(1.0); // Create indices data.\n    // prettier-ignore\n\n    var indices = new Uint16Array([// Up\n    0, 2, 1, 2, 0, 3, // Down\n    4, 6, 7, 6, 4, 5, // Left\n    8, 10, 9, 10, 8, 11, // Right\n    12, 14, 15, 14, 12, 13, // Front\n    16, 18, 17, 18, 16, 19, // Back\n    20, 22, 23, 22, 20, 21]); // Create gpu vertex buffer and index buffer.\n\n    var posNorBuffer = new _oasisEngine.Buffer(engine, _oasisEngine.BufferBindFlag.VertexBuffer, positionNormals, _oasisEngine.BufferUsage.Static);\n    var independentColorBuffer = new _oasisEngine.Buffer(engine, _oasisEngine.BufferBindFlag.VertexBuffer, colorData, _oasisEngine.BufferUsage.Dynamic);\n    var indexBuffer = new _oasisEngine.Buffer(engine, _oasisEngine.BufferBindFlag.IndexBuffer, indices, _oasisEngine.BufferUsage.Static); // Bind buffer.\n\n    cubeMesh.setVertexBufferBinding(posNorBuffer, 24, 0);\n    cubeMesh.setVertexBufferBinding(independentColorBuffer, 12, 1);\n    cubeMesh.setIndexBufferBinding(indexBuffer, _oasisEngine.IndexFormat.UInt16); // Set vertexElements.\n\n    cubeMesh.setVertexElements([new _oasisEngine.VertexElement(\"POSITION\", 0, _oasisEngine.VertexElementFormat.Vector3, 0), new _oasisEngine.VertexElement(\"NORMAL\", 12, _oasisEngine.VertexElementFormat.Vector3, 0), new _oasisEngine.VertexElement(\"COLOR_0\", 0, _oasisEngine.VertexElementFormat.Vector3, 1)]); // Add one sub geometry.\n\n    cubeMesh.addSubMesh(0, indices.length); // Set `vertexColors` and `colorBuffer` to `randomColorScript`.\n\n    randomColorScript.colorData = colorData;\n    randomColorScript.colorBuffer = independentColorBuffer;\n    return cubeMesh;\n  }\n});"},"name":"buffer-mesh-independent","id":"fa780752-0bb2-5bdb-863c-05ed3b2c5748"}}},"staticQueryHashes":[]}