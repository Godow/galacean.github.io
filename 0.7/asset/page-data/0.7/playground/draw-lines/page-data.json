{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.7/playground/draw-lines","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\", \"dat.gui\", \"@oasis-engine/physics-lite\", \"@oasis-engine/controls\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"), require(\"dat.gui\"), require(\"@oasis-engine/physics-lite\"), require(\"@oasis-engine/controls\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine, global.dat, global[\"@oasisEngine/physicsLite\"], global[\"@oasisEngine/controls\"]);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine, dat, _physicsLite, _controls) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n\n  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\n  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var gui = new dat.GUI();\n  var tempLine = new _oasisEngine.Vector3();\n  var tempPerpendicular = new _oasisEngine.Vector3();\n  var tempP1 = new _oasisEngine.Vector3();\n  var tempP2 = new _oasisEngine.Vector3();\n  var tempP3 = new _oasisEngine.Vector3();\n  var tempP4 = new _oasisEngine.Vector3();\n  var tempZAxis = new _oasisEngine.Vector3(0, 0, 1);\n  var tempRotateAxis = new _oasisEngine.Vector3();\n\n  var DrawScript = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(DrawScript, _Script);\n\n    function DrawScript() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Script.call.apply(_Script, [this].concat(args)) || this;\n      _this._preDrawTime = 0;\n      _this._prePointer = new _oasisEngine.Vector3();\n      _this._meshEntity = void 0;\n      _this._meshMaterial = void 0;\n      _this._camera = void 0;\n      _this._depth = 10;\n      _this._lineWidth = 0.1;\n      _this._forward = new _oasisEngine.Vector3();\n      _this._precision = 15;\n      _this._drawInterval = 30;\n      _this._color = new _oasisEngine.Color(1, 1, 1, 1);\n      _this.tempPointer = new _oasisEngine.Vector3();\n      return _this;\n    }\n\n    var _proto = DrawScript.prototype;\n\n    _proto.setColor = function setColor(r, g, b, a) {\n      this._meshMaterial = new _oasisEngine.UnlitMaterial(this.engine);\n      this._meshMaterial.renderFace = _oasisEngine.RenderFace.Double;\n      this._meshMaterial.baseColor = this._color.setValue(r, g, b, a);\n    };\n\n    _proto.onStart = function onStart() {\n      this._meshEntity = this.entity.createChild(\"mesh\");\n      this._meshMaterial = new _oasisEngine.UnlitMaterial(this.engine);\n      this._meshMaterial.renderFace = _oasisEngine.RenderFace.Double;\n      this._meshMaterial.baseColor = this._color;\n    };\n\n    _proto.onPointerDrag = function onPointerDrag() {\n      var now = this.engine.time.nowTime;\n\n      if (now - this._preDrawTime >= this._drawInterval) {\n        this._preDrawTime = now;\n        var endPointer = this.tempPointer,\n            startPointer = this._prePointer;\n        var _this$engine$inputMan = this.engine.inputManager.pointers[0].position,\n            screenX = _this$engine$inputMan.x,\n            screenY = _this$engine$inputMan.y;\n\n        this._camera.screenToWorldPoint(endPointer.setValue(screenX, screenY, this._depth), endPointer);\n\n        var sx = startPointer.x,\n            sy = startPointer.y,\n            sz = startPointer.z;\n        var ex = endPointer.x,\n            ey = endPointer.y,\n            ez = endPointer.z;\n\n        if (sx === ex && sy === ey && sz === ez) {\n          return;\n        }\n\n        var meshEntity = this._meshEntity,\n            forward = this._forward,\n            lineWidth = this._lineWidth,\n            meshMaterial = this._meshMaterial; // Draw circle.\n\n        var rendererCircle = meshEntity.addComponent(_oasisEngine.MeshRenderer);\n        rendererCircle.mesh = createCircleMesh(endPointer, forward, lineWidth, this._precision);\n        rendererCircle.setMaterial(meshMaterial); // Draw line.\n\n        var renderer = meshEntity.addComponent(_oasisEngine.MeshRenderer);\n        renderer.mesh = createLineMesh(startPointer, endPointer, forward, lineWidth);\n        renderer.setMaterial(meshMaterial);\n        startPointer.setValue(ex, ey, ez);\n      }\n    };\n\n    _proto.onPointerDown = function onPointerDown() {\n      // Screen pointer to world pointer.\n      this._preDrawTime = this.engine.time.nowTime;\n      var _this$engine$inputMan2 = this.engine.inputManager.pointers[0].position,\n          screenX = _this$engine$inputMan2.x,\n          screenY = _this$engine$inputMan2.y;\n      var startPointer = this._prePointer;\n\n      this._camera.screenToWorldPoint(startPointer.setValue(screenX, screenY, this._depth), startPointer); // Draw circle.\n\n\n      var renderer = this._meshEntity.addComponent(_oasisEngine.MeshRenderer);\n\n      renderer.mesh = createCircleMesh(this._prePointer, this._forward, this._lineWidth, this._precision);\n      renderer.setMaterial(this._meshMaterial);\n    };\n\n    _createClass(DrawScript, [{\n      key: \"camera\",\n      set: function set(val) {\n        this._camera = val;\n        val.entity.transform.getWorldForward(this._forward);\n      }\n    }, {\n      key: \"lineWidth\",\n      set: function set(val) {\n        this._lineWidth = val;\n      }\n    }, {\n      key: \"precision\",\n      set: function set(val) {\n        this._precision = val;\n      }\n    }, {\n      key: \"depth\",\n      set: function set(val) {\n        this._depth = val;\n      }\n    }, {\n      key: \"drawInterval\",\n      set: function set(val) {\n        this._drawInterval = val;\n      }\n    }]);\n\n    return DrawScript;\n  }(_oasisEngine.Script);\n\n  var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n  engine.physicsManager.initialize(_physicsLite.LitePhysics);\n  engine.canvas.resizeByClientSize();\n  var scene = engine.sceneManager.activeScene;\n  var rootEntity = scene.createRootEntity(); // init light\n\n  scene.ambientLight.diffuseSolidColor.setValue(1, 1, 1, 1);\n  scene.ambientLight.diffuseIntensity = 1.2; // init camera\n\n  var cameraEntity = rootEntity.createChild(\"camera\");\n  var camera = cameraEntity.addComponent(_oasisEngine.Camera);\n  cameraEntity.transform.setPosition(0, 0, 10);\n  cameraEntity.transform.lookAt(new _oasisEngine.Vector3(0, 0, 0));\n  var cameraControl = cameraEntity.addComponent(_controls.OrbitControl);\n  cameraControl.enabled = false; // init plane\n\n  var planeEntity = rootEntity.createChild(\"camera\");\n  var planeCollider = planeEntity.addComponent(_oasisEngine.StaticCollider);\n  var planeShape = new _oasisEngine.BoxColliderShape();\n  planeShape.setSize(20, 20, 1);\n  planeCollider.addShape(planeShape);\n  var planeScript = planeEntity.addComponent(DrawScript);\n  planeScript.camera = camera;\n  engine.run();\n  /**\n   * Draw a line segment perpendicular to the forward vector.\n   * @param startPos - Start world position\n   * @param endPos - End world position\n   * @param forwardVec3 - Forward vector\n   * @param lineWidth - Line width\n   * @returns ModelMesh containing mesh information\n   */\n\n  function createLineMesh(startPos, endPos, forwardVec3, lineWidth) {\n    // Get direction vector.\n    _oasisEngine.Vector3.subtract(endPos, startPos, tempLine); // Get perpendicular vector.\n\n\n    _oasisEngine.Vector3.cross(tempLine, forwardVec3, tempPerpendicular);\n\n    tempPerpendicular.normalize().scale(lineWidth / 2); // Get four vertices.\n\n    _oasisEngine.Vector3.add(startPos, tempPerpendicular, tempP1);\n\n    _oasisEngine.Vector3.subtract(startPos, tempPerpendicular, tempP2);\n\n    _oasisEngine.Vector3.add(tempP1, tempLine, tempP3);\n\n    _oasisEngine.Vector3.add(tempP2, tempLine, tempP4); // Draw two triangles.\n\n\n    var mesh = new _oasisEngine.ModelMesh(engine);\n    mesh.setPositions([tempP1, tempP2, tempP3, tempP4]);\n    mesh.setIndices(new Uint16Array([0, 1, 2, 2, 1, 3]));\n    mesh.addSubMesh(0, 6);\n    mesh.uploadData(false);\n    return mesh;\n  }\n  /**\n   * Draw a circle perpendicular to the forward vector.\n   * @param pos - The world position of the center of the circle\n   * @param forwardVec3 - Forward vector\n   * @param lineWidth - Line width\n   * @param precision - Precision\n   * @returns ModelMesh containing mesh information\n   */\n\n\n  function createCircleMesh(pos, forwardVec3, lineWidth, precision) {\n    _oasisEngine.Vector3.cross(tempZAxis, forwardVec3, tempRotateAxis);\n\n    var vec3Arr = [];\n    var axisLen = tempRotateAxis.length();\n    var rad = 2 * Math.PI / precision;\n\n    if (axisLen <= _oasisEngine.MathUtil.zeroTolerance) {\n      for (var i = 0; i < precision; i++) {\n        var vec3 = new _oasisEngine.Vector3(lineWidth * Math.sin(rad * i) / 2, lineWidth * Math.cos(rad * i) / 2, 0);\n        vec3Arr.push(vec3.add(pos));\n      }\n    } else {\n      var rotateVal = _oasisEngine.Vector3.dot(tempZAxis, forwardVec3) > 0 ? Math.asin(axisLen) : Math.PI - Math.asin(axisLen);\n      var quat = new _oasisEngine.Quaternion();\n      quat.rotationAxisAngle(tempRotateAxis, rotateVal);\n\n      for (var _i = 0; _i < precision; _i++) {\n        var _vec = new _oasisEngine.Vector3(lineWidth * Math.sin(rad * _i) / 2, lineWidth * Math.cos(rad * _i) / 2, 0);\n\n        _vec.transformByQuat(quat);\n\n        vec3Arr.push(_vec.add(pos));\n      }\n    }\n\n    vec3Arr.push(pos);\n    var mesh = new _oasisEngine.ModelMesh(engine);\n    mesh.setPositions(vec3Arr);\n    var indexArr = [];\n\n    for (var _i2 = 0; _i2 < precision; _i2++) {\n      indexArr.push(_i2, precision, (_i2 + 1) % precision);\n    }\n\n    mesh.setIndices(new Uint16Array(indexArr));\n    mesh.addSubMesh(0, indexArr.length);\n    mesh.uploadData(false);\n    return mesh;\n  } // Debug\n\n\n  var debugInfo = {\n    mode: \"Draw\",\n    lineWidth: 0.1,\n    precision: 15,\n    depth: 10,\n    lineColor: [255, 255, 255],\n    drawInterval: 30,\n    resetView: function resetView() {\n      cameraControl.enabled && cameraEntity.transform.setPosition(0, 0, 10);\n    }\n  };\n  gui.add(debugInfo, \"mode\", [\"Observe\", \"Draw\"]).onChange(function (v) {\n    if (v === \"Draw\") {\n      planeScript.camera = camera;\n      planeScript.enabled = true;\n      cameraControl.enabled = false;\n    } else {\n      planeScript.enabled = false;\n      cameraControl.enabled = true;\n      cameraEntity.transform.lookAt(new _oasisEngine.Vector3(0, 0, 0));\n    }\n  });\n  gui.add(debugInfo, \"lineWidth\", 0.01, 2, 0.02).onChange(function (v) {\n    planeScript.lineWidth = v;\n  });\n  gui.add(debugInfo, \"precision\", 4, 40, 1).onChange(function (v) {\n    planeScript.precision = v;\n  });\n  gui.add(debugInfo, \"depth\", 5, 15, 0.5).onChange(function (v) {\n    planeScript.depth = v;\n  });\n  gui.add(debugInfo, \"drawInterval\", 15, 100, 1).onChange(function (v) {\n    planeScript.drawInterval = v;\n  });\n  gui.addColor(debugInfo, \"lineColor\").onChange(function (v) {\n    planeScript.setColor(v[0] / 255, v[1] / 255, v[2] / 255, 1);\n  });\n  gui.add(debugInfo, \"resetView\");\n});"},"name":"draw-lines","id":"a0bddca6-9c62-5728-b93e-ff806e9356ec"}}},"staticQueryHashes":[]}