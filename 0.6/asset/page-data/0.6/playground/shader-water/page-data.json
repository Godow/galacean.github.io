{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.6/playground/shader-water","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@oasis-engine/controls\", \"dat.gui\", \"oasis-engine\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@oasis-engine/controls\"), require(\"dat.gui\"), require(\"oasis-engine\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global[\"@oasisEngine/controls\"], global.dat, global.oasisEngine);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_controls, dat, _oasisEngine) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n\n  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\n  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var gui = new dat.GUI(); //-- create engine object\n\n  var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n  engine.canvas.resizeByClientSize();\n  var scene = engine.sceneManager.activeScene;\n  var rootEntity = scene.createRootEntity(); //-- create camera\n\n  var cameraEntity = rootEntity.createChild(\"camera_entity\");\n  cameraEntity.transform.position = new _oasisEngine.Vector3(0, 0, 15);\n  cameraEntity.addComponent(_oasisEngine.Camera);\n  var orbitControl = cameraEntity.addComponent(_controls.OrbitControl);\n  orbitControl.minDistance = 15;\n  orbitControl.maxDistance = 15; // 自定义材质\n\n  var vertexSource = \"\\nuniform mat4 u_MVPMat;\\nattribute vec3 POSITION;\\nattribute vec2 TEXCOORD_0;\\nattribute vec3 NORMAL;\\n\\nvarying vec2 v_uv;\\nvarying vec3 v_position;\\nvarying vec3 v_normal;\\n\\n\\nvoid main() {\\n\\n  gl_Position = u_MVPMat  *  vec4( POSITION, 1.0 );\\n  v_uv = TEXCOORD_0;\\n  v_normal = NORMAL;\\n  v_position = POSITION;\\n}\\n \";\n  var fragSource = \"\\nvarying vec2 v_uv;\\nvarying vec3 v_position;\\nvarying vec3 v_normal;\\n\\nuniform float u_time;\\nuniform sampler2D u_texture;\\nuniform vec3 u_cameraPos;\\n\\n#define EPS 0.001\\n#define MAX_ITR 100\\n#define MAX_DIS 100.0\\n#define PI\\t \\t  3.141592\\n\\nuniform float u_water_scale;\\nuniform float u_water_speed;\\n\\nuniform vec3 u_sea_base;\\nuniform vec3 u_water_color;\\nuniform float u_sea_height;\\n\\n// Distance Functions\\nfloat sd_sph(vec3 p, float r) { return length(p) - r; }\\n\\n// Distance Map\\nfloat map(vec3 p, vec2 sc)\\n{    \\n    float l = cos(length(p * 2.0));\\n    vec2 u = vec2(l, sc.y);\\n    vec2 um = u * 0.3;\\n    um.x += u_time * 0.1 * u_water_speed;\\n    um.y += -u_time * 0.025 * u_water_speed;\\n    um.x += (um.y) * 2.0;    \\n    float a1 = texture2D(u_texture, (p.yz  *  .4 + um) * u_water_scale).x;\\n    float a2 = texture2D(u_texture, (p.zx  *  .4 + um) * u_water_scale).x;\\n    float a3 = texture2D(u_texture, (p.xy  *  .4 + um) * u_water_scale).x;\\n    \\n    float t1 = a1 + a2 + a3;\\n    t1 /= 15.0 * u_water_scale;\\n    \\n    float b1 = texture2D(u_texture, (p.yz  *  1. + u) * u_water_scale).x;\\n    float b2 = texture2D(u_texture, (p.zx  *  1. + u) * u_water_scale).x;\\n    float b3 = texture2D(u_texture, (p.xy  *  1. + u) * u_water_scale).x;\\n    \\n    float t2 = b1 + b2 + b3;\\n    t2 /= 15.0  *  u_water_scale;\\n    \\n    float comb = t1 * 0.4 + t2 * 0.1 * (1.0 - t1);\\n    \\n    return comb + sd_sph(p, 3.); // sd_box(p, vec3(1., 1., 1.)) + sdPlane(p, vec4(0., 0., 1.0, 0.));//\\n}\\n\\nfloat diffuse(vec3 n,vec3 l,float p) {\\n    return pow(dot(n,l) * 0.4 + 0.6,p);\\n}\\n\\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \\n    float nrm = (s + 8.0) / (PI * 8.0);\\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\\n}\\n\\n// sky\\nvec3 getSkyColor(vec3 e) {\\n    e.y = max(e.y,0.0);\\n    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4);\\n}\\n\\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  \\n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\\n    fresnel = pow(fresnel,3.0) * 0.65;\\n\\n    vec3 reflected = getSkyColor(reflect(eye,n));    \\n    vec3 refracted = u_sea_base + diffuse(normalize(n),l,80.0) * u_water_color * 0.12; \\n\\n    vec3 color =  mix(refracted,reflected,fresnel);\\n\\n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\\n    color += u_water_color * (length(p) - u_sea_height) * 0.18 * atten; // \\n\\n    color += vec3(specular(n,l,eye,20.0));\\n\\n    return color;\\n}\\n\\nvoid main (void) {\\n\\n    vec2 uv = vec2(v_uv.x * 0.5, v_uv.y * 0.5);//  / iResolution.xy;\\n    \\n    vec3 pos = v_position; \\n    vec3 dist = pos - u_cameraPos;\\n\\n    float dis = EPS;\\n    vec3 rayDir = normalize(dist);\\n    \\n    // Ray marching\\n    for(int i = 0; i < MAX_ITR; i++)\\n    {\\n        if(dis < EPS || dis > MAX_DIS)\\n          break;\\n        dis = map(pos, uv);\\n        pos += dis * rayDir;\\n    }\\n    \\n    if (dis >= EPS) \\n    {\\n      discard;\\n    }\\n    \\n    vec3 lig = normalize(vec3(-1., -3, -4.5));\\n    vec2 eps = vec2(0.0, EPS);\\n    vec3 normal = normalize(vec3(\\n        map(pos + eps.yxx, uv) - map(pos - eps.yxx, uv),\\n        map(pos + eps.xyx, uv) - map(pos - eps.xyx, uv),\\n        map(pos + eps.xxy, uv) - map(pos - eps.xxy, uv)\\n    ));\\n    \\n    vec3 col = getSeaColor(pos, normal, lig, rayDir, dist);\\n    \\n    gl_FragColor = vec4(col,1.0);\\n}\\n\"; // 初始化 shader\n\n  _oasisEngine.Shader.create(\"water\", vertexSource, fragSource);\n\n  var ShaderMaterial = /*#__PURE__*/function (_Material) {\n    _inheritsLoose(ShaderMaterial, _Material);\n\n    function ShaderMaterial(engine) {\n      var _this;\n\n      _this = _Material.call(this, engine, _oasisEngine.Shader.find(\"water\")) || this;\n\n      _this.shaderData.setFloat(\"u_sea_height\", 0.6);\n\n      _this.shaderData.setFloat(\"u_water_scale\", 0.2);\n\n      _this.shaderData.setFloat(\"u_water_speed\", 3.5);\n\n      _this.shaderData.setColor(\"u_sea_base\", new _oasisEngine.Color(0.1, 0.2, 0.22));\n\n      _this.shaderData.setColor(\"u_water_color\", new _oasisEngine.Color(0.8, 0.9, 0.6));\n\n      return _this;\n    }\n\n    return ShaderMaterial;\n  }(_oasisEngine.Material);\n\n  var material = new ShaderMaterial(engine); // 创建球体形的海面\n\n  var sphereEntity = rootEntity.createChild(\"sphere\");\n  var renderer = sphereEntity.addComponent(_oasisEngine.MeshRenderer);\n  renderer.mesh = _oasisEngine.PrimitiveMesh.createSphere(engine, 3, 50);\n  renderer.setMaterial(material); // 加载噪声纹理\n\n  engine.resourceManager.load({\n    type: _oasisEngine.AssetType.Texture2D,\n    url: \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*AC4IQZ6mfCIAAAAAAAAAAAAAARQnAQ\"\n  }).then(function (texture) {\n    material.shaderData.setTexture(\"u_texture\", texture);\n    engine.run();\n  }); // u_time 更新脚本\n\n  var WaterScript = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(WaterScript, _Script);\n\n    function WaterScript() {\n      return _Script.apply(this, arguments) || this;\n    }\n\n    var _proto = WaterScript.prototype;\n\n    _proto.onUpdate = function onUpdate() {\n      material.shaderData.setFloat(\"u_time\", engine.time.timeSinceStartup * 0.001);\n    };\n\n    return WaterScript;\n  }(_oasisEngine.Script);\n\n  sphereEntity.addComponent(WaterScript); // debug\n\n  function openDebug() {\n    var shaderData = material.shaderData;\n    var baseColor = shaderData.getColor(\"u_sea_base\");\n    var waterColor = shaderData.getColor(\"u_water_color\");\n    var debug = {\n      sea_height: shaderData.getFloat(\"u_sea_height\"),\n      water_scale: shaderData.getFloat(\"u_water_scale\"),\n      water_speed: shaderData.getFloat(\"u_water_speed\"),\n      sea_base: [baseColor.r * 255, baseColor.g * 255, baseColor.b * 255],\n      water_color: [waterColor.r * 255, waterColor.g * 255, waterColor.b * 255]\n    };\n    gui.add(debug, \"sea_height\", 0, 3).onChange(function (v) {\n      shaderData.setFloat(\"u_sea_height\", v);\n    });\n    gui.add(debug, \"water_scale\", 0, 4).onChange(function (v) {\n      shaderData.setFloat(\"u_water_scale\", v);\n    });\n    gui.add(debug, \"water_speed\", 0, 4).onChange(function (v) {\n      shaderData.setFloat(\"u_water_speed\", v);\n    });\n    gui.addColor(debug, \"sea_base\").onChange(function (v) {\n      baseColor.r = v[0] / 255;\n      baseColor.g = v[1] / 255;\n      baseColor.b = v[2] / 255;\n    });\n    gui.addColor(debug, \"water_color\").onChange(function (v) {\n      waterColor.r = v[0] / 255;\n      waterColor.g = v[1] / 255;\n      waterColor.b = v[2] / 255;\n    });\n  }\n\n  openDebug();\n});"},"name":"shader-water","id":"aabdd0ba-3e99-5489-8165-3bf52e469877"}}},"staticQueryHashes":[]}