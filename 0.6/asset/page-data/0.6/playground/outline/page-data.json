{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.6/playground/outline","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@oasis-engine/controls\", \"dat.gui\", \"oasis-engine\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@oasis-engine/controls\"), require(\"dat.gui\"), require(\"oasis-engine\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global[\"@oasisEngine/controls\"], global.dat, global.oasisEngine);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_controls, dat, _oasisEngine) {\n  \"use strict\";\n\n  dat = _interopRequireWildcard(dat);\n\n  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\n  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var gui = new dat.GUI();\n  var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n  engine.run();\n  engine.canvas.resizeByClientSize();\n  var scene = engine.sceneManager.activeScene;\n  var rootEntity = scene.createRootEntity();\n  scene.background.solidColor.setValue(1, 1, 1, 1); // camera\n\n  var cameraNode = rootEntity.createChild(\"camera_node\");\n  cameraNode.transform.setPosition(0, 1.3, 1);\n  var camera = cameraNode.addComponent(_oasisEngine.Camera);\n  camera.enableFrustumCulling = false;\n  cameraNode.addComponent(_controls.OrbitControl).target.setValue(0, 1.3, 0); // ambient light\n\n  engine.resourceManager.load({\n    type: _oasisEngine.AssetType.Env,\n    url: \"https://gw.alipayobjects.com/os/bmw-prod/34986a5b-fa16-40f1-83c8-1885efe855d2.bin\"\n  }).then(function (ambientLight) {\n    scene.ambientLight = ambientLight;\n    ambientLight.specularIntensity = ambientLight.diffuseIntensity = 2;\n  });\n  engine.resourceManager.load({\n    type: _oasisEngine.AssetType.Prefab,\n    url: \"https://gw.alipayobjects.com/os/OasisHub/440000554/3615/%25E5%25BD%2592%25E6%25A1%25A3.gltf\"\n  }).then(function (gltf) {\n    var defaultSceneRoot = gltf.defaultSceneRoot;\n    rootEntity.addChild(defaultSceneRoot);\n    openDebug();\n  });\n  /** ------------------ Border ------------------ */\n  // 外描边-模版测试\n\n  var Border = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(Border, _Script);\n\n    var _proto = Border.prototype;\n\n    _proto.getBorderMaterial = function getBorderMaterial(engine) {\n      if (!this.material) {\n        if (!_oasisEngine.Shader.find(\"border-shader\")) {\n          var vertex = \"\\n                attribute vec3 POSITION;\\n                attribute vec3 NORMAL;\\n  \\n                uniform float u_width;\\n                uniform mat4 u_MVPMat;\\n                uniform mat4 u_modelMat;\\n                uniform mat4 u_viewMat;\\n                uniform mat4 u_projMat;\\n                uniform mat4 u_normalMat;\\n                \\n                void main() {\\n                   vec4 mPosition = u_modelMat * vec4(POSITION, 1.0);\\n                   vec3 mNormal = normalize( mat3(u_normalMat) * NORMAL );\\n                   mPosition.xyz += mNormal * u_width;\\n                   gl_Position = u_projMat * u_viewMat * mPosition;\\n                }\\n                \";\n          var fragment = \"\\n                uniform vec3 u_color;\\n\\n                void main(){\\n                  gl_FragColor = vec4(u_color, 1);\\n                }\\n                \";\n\n          _oasisEngine.Shader.create(\"border-shader\", vertex, fragment);\n        }\n\n        var material = new _oasisEngine.Material(engine, _oasisEngine.Shader.find(\"border-shader\"));\n        this.material = material;\n        material.renderQueueType = _oasisEngine.RenderQueueType.Transparent + 1;\n        material.renderState.rasterState.cullMode = _oasisEngine.CullMode.Off;\n        var stencilState = material.renderState.stencilState;\n        stencilState.enabled = true;\n        stencilState.referenceValue = 1;\n        stencilState.compareFunctionFront = _oasisEngine.CompareFunction.NotEqual;\n        stencilState.compareFunctionBack = _oasisEngine.CompareFunction.NotEqual;\n        stencilState.writeMask = 0x00;\n        this.size = this._size;\n        this.color = this._color;\n      }\n\n      return this.material;\n    };\n\n    _proto.showBorder = function showBorder(renderer) {\n      var entity = renderer.entity;\n      var material = renderer.getMaterial();\n      var stencilState = material.renderState.stencilState;\n      stencilState.enabled = true;\n      stencilState.referenceValue = 1;\n      stencilState.passOperationFront = _oasisEngine.StencilOperation.Replace;\n      var borderMaterial = this.getBorderMaterial(entity.engine);\n      var borderRenderer = entity.addComponent(_oasisEngine.MeshRenderer);\n      borderRenderer.mesh = renderer.mesh;\n      borderRenderer.setMaterial(borderMaterial);\n      this.borderRenderer.push(borderRenderer);\n    };\n\n    function Border(entity) {\n      var _this;\n\n      _this = _Script.call(this, entity) || this;\n      _this.material = void 0;\n      _this.borderRenderer = [];\n      _this._size = 3;\n      _this._color = new _oasisEngine.Color(0, 0, 0, 1);\n      var meshes = [];\n      rootEntity.getComponentsIncludeChildren(_oasisEngine.MeshRenderer, meshes);\n      meshes.forEach(function (mesh) {\n        _this.showBorder(mesh);\n      });\n      return _this;\n    }\n\n    _proto.onDestroy = function onDestroy() {\n      this.borderRenderer.forEach(function (renderer) {\n        renderer.destroy();\n      });\n      this.borderRenderer.length = 0;\n    };\n\n    _createClass(Border, [{\n      key: \"size\",\n      get: function get() {\n        return this._size;\n      },\n      set: function set(value) {\n        this.material.shaderData.setFloat(\"u_width\", value * 0.001);\n        this._size = value;\n      }\n    }, {\n      key: \"color\",\n      get: function get() {\n        return this._color;\n      },\n      set: function set(value) {\n        this.material.shaderData.setColor(\"u_color\", value);\n        this._color = value;\n      }\n    }]);\n\n    return Border;\n  }(_oasisEngine.Script); // 内描边-背面剔除\n\n\n  var Border2 = /*#__PURE__*/function (_Script2) {\n    _inheritsLoose(Border2, _Script2);\n\n    var _proto2 = Border2.prototype;\n\n    _proto2.getBorderMaterial = function getBorderMaterial(engine) {\n      if (!this.material) {\n        if (!_oasisEngine.Shader.find(\"border-shader\")) {\n          var vertex = \"\\n                attribute vec3 POSITION;\\n                attribute vec3 NORMAL;\\n  \\n                uniform float u_width;\\n                uniform mat4 u_MVPMat;\\n                uniform mat4 u_modelMat;\\n                uniform mat4 u_viewMat;\\n                uniform mat4 u_projMat;\\n                uniform mat4 u_normalMat;\\n                \\n                void main() {\\n                   vec4 mPosition = u_modelMat * vec4(POSITION, 1.0);\\n                   vec3 mNormal = normalize( mat3(u_normalMat) * NORMAL );\\n                   mPosition.xyz += mNormal * u_width;\\n                   gl_Position = u_projMat * u_viewMat * mPosition;\\n                }\\n                \";\n          var fragment = \"\\n                uniform vec3 u_color;\\n\\n                void main(){\\n                  gl_FragColor = vec4(u_color, 1);\\n                }\\n                \";\n\n          _oasisEngine.Shader.create(\"border-shader\", vertex, fragment);\n        }\n\n        var material = new _oasisEngine.Material(engine, _oasisEngine.Shader.find(\"border-shader\"));\n        this.material = material;\n        material.renderQueueType = _oasisEngine.RenderQueueType.Transparent + 1;\n        material.renderState.rasterState.cullMode = _oasisEngine.CullMode.Front;\n        this.size = this._size;\n        this.color = this._color;\n      }\n\n      return this.material;\n    };\n\n    _proto2.showBorder = function showBorder(renderer) {\n      var entity = renderer.entity;\n      var borderMaterial = this.getBorderMaterial(entity.engine);\n      var borderRenderer = entity.addComponent(_oasisEngine.MeshRenderer);\n      borderRenderer.mesh = renderer.mesh;\n      borderRenderer.setMaterial(borderMaterial);\n      this.borderRenderer.push(borderRenderer);\n    };\n\n    function Border2(entity) {\n      var _this2;\n\n      _this2 = _Script2.call(this, entity) || this;\n      _this2.material = void 0;\n      _this2.borderRenderer = [];\n      _this2._size = 3;\n      _this2._color = new _oasisEngine.Color(0, 0, 0, 1);\n      var renderers = [];\n      rootEntity.getComponentsIncludeChildren(_oasisEngine.MeshRenderer, renderers);\n      renderers.forEach(function (renderer) {\n        _this2.showBorder(renderer);\n      });\n      return _this2;\n    }\n\n    _proto2.onDestroy = function onDestroy() {\n      this.borderRenderer.forEach(function (renderer) {\n        renderer.destroy();\n      });\n      this.borderRenderer.length = 0;\n    };\n\n    _createClass(Border2, [{\n      key: \"size\",\n      get: function get() {\n        return this._size;\n      },\n      set: function set(value) {\n        this.material.shaderData.setFloat(\"u_width\", value * 0.001);\n        this._size = value;\n      }\n    }, {\n      key: \"color\",\n      get: function get() {\n        return this._color;\n      },\n      set: function set(value) {\n        this.material.shaderData.setColor(\"u_color\", value);\n        this._color = value;\n      }\n    }]);\n\n    return Border2;\n  }(_oasisEngine.Script); // 边缘检测-后处理\n\n\n  var Border3 = /*#__PURE__*/function (_Script3) {\n    _inheritsLoose(Border3, _Script3);\n\n    var _proto3 = Border3.prototype;\n\n    _proto3.getScreenMaterial = function getScreenMaterial(engine) {\n      if (!this.material) {\n        if (!_oasisEngine.Shader.find(\"screen-shader\")) {\n          var vertex = \"\\n        attribute vec3 POSITION;\\n        attribute vec2 TEXCOORD_0;\\n        \\n        varying vec2 v_uv;\\n        \\n        void main(){\\n            gl_Position = vec4( POSITION.xzy , 1.0);\\n            gl_Position.y *= -1.0;\\n            v_uv = TEXCOORD_0;\\n            v_uv.y = 1.0 - v_uv.y;\\n        }\\n                \";\n          var fragment = \"\\n                uniform vec3 u_color;\\n                uniform sampler2D u_texture;\\n                uniform vec2 u_texSize;\\n\\n                varying vec2 v_uv;\\n\\n\\n                float luminance(vec4 color) {\\n                  return  0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b; \\n                }\\n\\n                float sobel() {\\n                  float Gx[9] = float[](\\n                              -1.0,  0.0,  1.0,\\n                              -2.0,  0.0,  2.0,\\n                              -1.0,  0.0,  1.0);\\n                  float Gy[9] = float[](\\n                              -1.0, -2.0, -1.0,\\n                              0.0,  0.0,  0.0,\\n                              1.0,  2.0,  1.0);\\t\\t\\n                  \\n                  float texColor;\\n                  float edgeX = 0.0;\\n                  float edgeY = 0.0;\\n                  vec2 uv[9];\\n\\n                  uv[0] = v_uv + u_texSize.xy * vec2(-1, -1);\\n\\t\\t\\t\\t          uv[1] = v_uv + u_texSize.xy * vec2(0, -1);\\n\\t\\t\\t\\t          uv[2] = v_uv + u_texSize.xy * vec2(1, -1);\\n\\t\\t\\t\\t          uv[3] = v_uv + u_texSize.xy * vec2(-1, 0);\\n\\t\\t\\t\\t          uv[4] = v_uv + u_texSize.xy * vec2(0, 0);\\n\\t\\t\\t\\t          uv[5] = v_uv + u_texSize.xy * vec2(1, 0);\\n\\t\\t\\t\\t          uv[6] = v_uv + u_texSize.xy * vec2(-1, 1);\\n\\t\\t\\t\\t          uv[7] = v_uv + u_texSize.xy * vec2(0, 1);\\n\\t\\t\\t\\t          uv[8] = v_uv + u_texSize.xy * vec2(1, 1);\\n\\n                  for (int i = 0; i < 9; i++) {\\n                    texColor = luminance(texture2D(u_texture, uv[i]));\\n                    edgeX += texColor * Gx[i];\\n                    edgeY += texColor * Gy[i];\\n                  }\\n                  \\n                  return abs(edgeX) + abs(edgeY);\\n                }\\n\\n                void main(){\\n                  // float sobelFactor = step(1.0, sobel());\\n                  float sobelFactor = sobel();\\n                  gl_FragColor = mix( texture2D(u_texture, v_uv), vec4(u_color,1.0), sobelFactor);\\n                  // gl_FragColor = mix( vec4(1.0), vec4(u_color,1.0), sobelFactor);\\n                  // gl_FragColor = vec4(u_color,1.0) * sobelFactor;\\n                }\\n                \";\n\n          _oasisEngine.Shader.create(\"screen-shader\", vertex, fragment);\n        }\n\n        var material = new _oasisEngine.Material(engine, _oasisEngine.Shader.find(\"screen-shader\"));\n        this.material = material;\n        this.color = this._color;\n        var _engine$canvas = engine.canvas,\n            width = _engine$canvas.width,\n            height = _engine$canvas.height;\n        material.shaderData.setVector2(\"u_texSize\", new _oasisEngine.Vector2(1 / width, 1 / height));\n      }\n\n      return this.material;\n    };\n\n    function Border3(entity) {\n      var _this3;\n\n      _this3 = _Script3.call(this, entity) || this;\n      _this3.material = void 0;\n      _this3._color = new _oasisEngine.Color(0, 0, 0, 1);\n      _this3._camera = void 0;\n      _this3._renderPass = void 0;\n      _this3._screen = void 0;\n\n      var material = _this3.getScreenMaterial(_this3.engine);\n\n      var _engine$canvas2 = engine.canvas,\n          width = _engine$canvas2.width,\n          height = _engine$canvas2.height;\n      var renderPass = _this3._renderPass = new _oasisEngine.RenderPass(\"border\", 1, null, null, _oasisEngine.Layer.Layer1);\n      var renderColorTexture = new _oasisEngine.RenderColorTexture(engine, width, height);\n      var renderTarget = new _oasisEngine.RenderTarget(engine, width, height, renderColorTexture);\n      var screen = _this3._screen = rootEntity.createChild(\"screen\");\n      var screenRenderer = screen.addComponent(_oasisEngine.MeshRenderer);\n      screen.layer = _oasisEngine.Layer.Layer1;\n      screenRenderer.mesh = _oasisEngine.PrimitiveMesh.createPlane(engine, 2, 2);\n      screenRenderer.setMaterial(material);\n      material.shaderData.setTexture(\"u_texture\", renderColorTexture);\n\n      renderPass.preRender = function () {\n        camera.renderTarget = null;\n      };\n\n      renderPass.postRender = function () {\n        camera.renderTarget = renderTarget;\n      };\n\n      return _this3;\n    }\n\n    _proto3.onDestroy = function onDestroy() {\n      this._screen.destroy();\n\n      if (this.camera) {\n        //@ts-ignore\n        this.camera._renderPipeline.removeRenderPass(this._renderPass);\n\n        this.camera.renderTarget.destroy();\n        this.camera.renderTarget = null;\n      }\n    };\n\n    _createClass(Border3, [{\n      key: \"color\",\n      get: function get() {\n        return this._color;\n      },\n      set: function set(value) {\n        this.material.shaderData.setColor(\"u_color\", value);\n        this._color = value;\n      }\n    }, {\n      key: \"camera\",\n      get: function get() {\n        return this._camera;\n      },\n      set: function set(value) {\n        if (this._camera !== value) {\n          this._camera = value; //@ts-ignore\n\n          this.camera._renderPipeline.addRenderPass(this._renderPass); //@ts-ignore\n\n\n          this.camera._renderPipeline.defaultRenderPass.mask = _oasisEngine.Layer.Layer0;\n        }\n      }\n    }]);\n\n    return Border3;\n  }(_oasisEngine.Script);\n\n  function openDebug() {\n    var borderEntity = rootEntity.createChild(\"border\");\n    var color = new _oasisEngine.Color();\n    var border = borderEntity.addComponent(Border);\n    var config = {\n      plan: \"外描边\",\n      size: 3,\n      color: [0, 0, 0]\n    };\n    gui.add(config, \"plan\", [\"外描边\", \"内描边\", \"后处理\"]).onChange(function (v) {\n      color.setValue(config.color[0] / 255, config.color[1] / 255, config.color[2] / 255, 1);\n      border.destroy();\n\n      if (v === \"外描边\") {\n        border = borderEntity.addComponent(Border);\n        border.size = config.size;\n        border.color = color;\n        showSize();\n      } else if (v === \"内描边\") {\n        border = borderEntity.addComponent(Border2);\n        border.size = config.size;\n        border.color = color;\n        showSize();\n      } else if (v === \"后处理\") {\n        border = borderEntity.addComponent(Border3);\n        border.camera = camera;\n        border.color = color;\n        hideSize();\n      }\n    }).name(\"描边方案\");\n    var size;\n\n    function showSize() {\n      hideSize();\n      size = gui.add(config, \"size\", 0, 5, 1).onChange(function (v) {\n        if (!(border instanceof Border3)) {\n          border.size = v;\n        }\n      });\n    }\n\n    function hideSize() {\n      size && size.remove();\n      size = null;\n    }\n\n    showSize();\n    gui.addColor(config, \"color\").onChange(function (v) {\n      color.setValue(v[0] / 255, v[1] / 255, v[2] / 255, 1);\n      border.color = color;\n    });\n  }\n});"},"name":"outline","id":"1fc6b9aa-c30a-547e-ba9b-b0645c155822"}}},"staticQueryHashes":[]}