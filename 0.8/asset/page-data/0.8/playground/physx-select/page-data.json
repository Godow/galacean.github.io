{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.8/playground/physx-select","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\", \"@oasis-engine/physics-physx\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"), require(\"@oasis-engine/physics-physx\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine, global[\"@oasisEngine/physicsPhysx\"]);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine, _physicsPhysx) {\n  \"use strict\";\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var PanScript = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(PanScript, _Script);\n\n    function PanScript() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Script.call.apply(_Script, [this].concat(args)) || this;\n      _this.startPointerPos = new _oasisEngine.Vector3();\n      _this.tempVec2 = new _oasisEngine.Vector2();\n      _this.tempVec3 = new _oasisEngine.Vector3();\n      _this.zValue = 0;\n      _this.collider = void 0;\n      _this.camera = void 0;\n      _this.invCanvasWidth = void 0;\n      _this.invCanvasHeight = void 0;\n      return _this;\n    }\n\n    var _proto = PanScript.prototype;\n\n    _proto.onStart = function onStart() {\n      this.collider = this.entity.getComponent(_oasisEngine.DynamicCollider);\n    };\n\n    _proto.onPointerDown = function onPointerDown() {\n      // get depth\n      this.camera.worldToViewportPoint(this.entity.transform.worldPosition, this.tempVec3);\n      this.zValue = (this.tempVec3.z + 1) / 2;\n      var tempVec2 = this.tempVec2,\n          tempVec3 = this.tempVec3; // @ts-ignore\n\n      this.getMergePointer(this.engine.inputManager.pointers, tempVec2);\n      tempVec3.set(tempVec2.x * this.invCanvasWidth, tempVec2.y * this.invCanvasHeight, this.zValue);\n      this.camera.viewportToWorldPoint(tempVec3, this.startPointerPos);\n      this.collider.linearVelocity = new _oasisEngine.Vector3();\n      this.collider.angularVelocity = new _oasisEngine.Vector3();\n    };\n\n    _proto.onPointerDrag = function onPointerDrag() {\n      var tempVec2 = this.tempVec2,\n          tempVec3 = this.tempVec3,\n          startPointerPos = this.startPointerPos;\n      var transform = this.entity.transform; // @ts-ignore\n\n      this.getMergePointer(this.engine.inputManager.pointers, tempVec2);\n      this.tempVec3.set(tempVec2.x * this.invCanvasWidth, tempVec2.y * this.invCanvasHeight, this.zValue);\n      this.camera.viewportToWorldPoint(tempVec3, tempVec3);\n\n      _oasisEngine.Vector3.subtract(tempVec3, startPointerPos, startPointerPos);\n\n      transform.worldPosition = transform.worldPosition.add(startPointerPos);\n      startPointerPos.copyFrom(tempVec3);\n    };\n\n    _proto.getMergePointer = function getMergePointer(pointers, out) {\n      out.copyFrom(pointers[0].position);\n      var len = pointers.length;\n\n      for (var i = 1; i < len; i++) {\n        var pos = pointers[i].position;\n        out.x += pos.x;\n        out.y += pos.y;\n      }\n    };\n\n    return PanScript;\n  }(_oasisEngine.Script);\n\n  function addPlane(rootEntity, size, position, rotation) {\n    var mtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    mtl.baseColor.set(0.2179807202597362, 0.2939682161541871, 0.31177952549087604, 1);\n    var planeEntity = rootEntity.createChild();\n    planeEntity.layer = _oasisEngine.Layer.Layer1;\n    var renderer = planeEntity.addComponent(_oasisEngine.MeshRenderer);\n    renderer.mesh = _oasisEngine.PrimitiveMesh.createPlane(rootEntity.engine, size.x, size.y);\n    renderer.setMaterial(mtl);\n    planeEntity.transform.position = position;\n    planeEntity.transform.rotationQuaternion = rotation;\n    var physicsPlane = new _oasisEngine.PlaneColliderShape();\n    physicsPlane.setPosition(0, 0, 0);\n    var planeCollider = planeEntity.addComponent(_oasisEngine.StaticCollider);\n    planeCollider.addShape(physicsPlane);\n    return planeEntity;\n  }\n\n  function addVerticalBox(rootEntity, texture, x, y, z, camera, invCanvasWidth, invCanvasHeight) {\n    var entity = rootEntity.createChild(\"entity\");\n    entity.transform.setPosition(x, y, z);\n    var boxMtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    var boxRenderer = entity.addComponent(_oasisEngine.MeshRenderer);\n    boxMtl.baseTexture = texture;\n    boxMtl.baseTexture.anisoLevel = 12;\n    boxRenderer.mesh = _oasisEngine.PrimitiveMesh.createCuboid(rootEntity.engine, 0.5, 0.33, 2, false);\n    boxRenderer.setMaterial(boxMtl);\n    var physicsBox = new _oasisEngine.BoxColliderShape();\n    physicsBox.size = new _oasisEngine.Vector3(0.5, 0.33, 2);\n    physicsBox.material.staticFriction = 1;\n    physicsBox.material.dynamicFriction = 1;\n    physicsBox.material.bounciness = 0.0;\n    var boxCollider = entity.addComponent(_oasisEngine.DynamicCollider);\n    boxCollider.addShape(physicsBox);\n    boxCollider.mass = 1;\n    boxCollider.collisionDetectionMode = _oasisEngine.CollisionDetectionMode.ContinuousSpeculative;\n    var pan = entity.addComponent(PanScript);\n    pan.camera = camera;\n    pan.invCanvasWidth = invCanvasWidth;\n    pan.invCanvasHeight = invCanvasHeight;\n  }\n\n  function addHorizontalBox(rootEntity, texture, x, y, z, camera, invCanvasWidth, invCanvasHeight) {\n    var entity = rootEntity.createChild(\"entity\");\n    entity.transform.setPosition(x, y, z);\n    var boxMtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    var boxRenderer = entity.addComponent(_oasisEngine.MeshRenderer);\n    boxMtl.baseTexture = texture;\n    boxMtl.baseTexture.anisoLevel = 12;\n    boxRenderer.mesh = _oasisEngine.PrimitiveMesh.createCuboid(rootEntity.engine, 2, 0.33, 0.5);\n    boxRenderer.setMaterial(boxMtl);\n    var physicsBox = new _oasisEngine.BoxColliderShape();\n    physicsBox.size = new _oasisEngine.Vector3(2, 0.33, 0.5);\n    physicsBox.material.staticFriction = 1;\n    physicsBox.material.dynamicFriction = 1;\n    physicsBox.material.bounciness = 0.0;\n    var boxCollider = entity.addComponent(_oasisEngine.DynamicCollider);\n    boxCollider.addShape(physicsBox);\n    boxCollider.mass = 0.5;\n    boxCollider.collisionDetectionMode = _oasisEngine.CollisionDetectionMode.ContinuousSpeculative;\n    var pan = entity.addComponent(PanScript);\n    pan.camera = camera;\n    pan.invCanvasWidth = invCanvasWidth;\n    pan.invCanvasHeight = invCanvasHeight;\n  }\n\n  function addBox(rootEntity, texture1, texture2, camera, invCanvasWidth, invCanvasHeight) {\n    for (var i = 0; i < 8; i++) {\n      addVerticalBox(rootEntity, texture1, -0.65, 0.165 + i * 0.33 * 2, 0, camera, invCanvasWidth, invCanvasHeight);\n      addVerticalBox(rootEntity, texture1, 0, 0.165 + i * 0.33 * 2, 0, camera, invCanvasWidth, invCanvasHeight);\n      addVerticalBox(rootEntity, texture1, 0.65, 0.165 + i * 0.33 * 2, 0, camera, invCanvasWidth, invCanvasHeight);\n      addHorizontalBox(rootEntity, texture2, 0, 0.165 + 0.33 + i * 0.33 * 2, -0.65, camera, invCanvasWidth, invCanvasHeight);\n      addHorizontalBox(rootEntity, texture2, 0, 0.165 + 0.33 + i * 0.33 * 2, 0, camera, invCanvasWidth, invCanvasHeight);\n      addHorizontalBox(rootEntity, texture2, 0, 0.165 + 0.33 + i * 0.33 * 2, 0.65, camera, invCanvasWidth, invCanvasHeight);\n    }\n  } //--------------------------------------------------------------------------------------------------------------------\n\n\n  _physicsPhysx.PhysXPhysics.initialize().then(function () {\n    var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n    engine.physicsManager.initialize(_physicsPhysx.PhysXPhysics);\n    engine.canvas.resizeByClientSize();\n    var invCanvasWidth = 1 / engine.canvas.width;\n    var invCanvasHeight = 1 / engine.canvas.height;\n    var scene = engine.sceneManager.activeScene;\n    var rootEntity = scene.createRootEntity(\"root\");\n    scene.ambientLight.diffuseSolidColor.set(0.5, 0.5, 0.5, 1);\n    scene.ambientLight.diffuseIntensity = 1.2; // init camera\n\n    var cameraEntity = rootEntity.createChild(\"camera\");\n    var camera = cameraEntity.addComponent(_oasisEngine.Camera);\n    cameraEntity.transform.setPosition(8, 5, 8);\n    cameraEntity.transform.lookAt(new _oasisEngine.Vector3(0, 2, 0), new _oasisEngine.Vector3(0, 1, 0));\n    var entity = cameraEntity.createChild(\"text\");\n    entity.transform.position = new _oasisEngine.Vector3(0, 3.5, -10);\n    var renderer = entity.addComponent(_oasisEngine.TextRenderer);\n    renderer.color = new _oasisEngine.Color();\n    renderer.text = \"Use mouse to move the bricks\";\n    renderer.font = _oasisEngine.Font.createFromOS(entity.engine, \"Arial\");\n    renderer.fontSize = 40; // init point light\n\n    var light = rootEntity.createChild(\"light\");\n    light.transform.setPosition(1, 2, 2);\n    light.transform.lookAt(new _oasisEngine.Vector3(0, 0, 0), new _oasisEngine.Vector3(0, 1, 0));\n    var pointLight = light.addComponent(_oasisEngine.DirectLight);\n    pointLight.intensity = 3;\n    addPlane(rootEntity, new _oasisEngine.Vector2(30, 30), new _oasisEngine.Vector3(), new _oasisEngine.Quaternion());\n    Promise.all([engine.resourceManager.load({\n      url: \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*Wkn5QY0tpbcAAAAAAAAAAAAAARQnAQ\",\n      type: _oasisEngine.AssetType.Texture2D\n    }), engine.resourceManager.load({\n      url: \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*W5azT5DjDAEAAAAAAAAAAAAAARQnAQ\",\n      type: _oasisEngine.AssetType.Texture2D\n    })]).then(function (asset) {\n      addBox(rootEntity, asset[0], asset[1], camera, invCanvasWidth, invCanvasHeight);\n      engine.run();\n    });\n  });\n});"},"name":"physx-select","id":"31548b4d-c6a5-5dd3-bfc2-35acdc1cfd6f"}}},"staticQueryHashes":[]}