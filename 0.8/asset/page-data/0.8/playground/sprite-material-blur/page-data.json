{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.8/playground/sprite-material-blur","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine) {\n  \"use strict\";\n\n  /**\n   * @title Sprite Material Blur\n   * @category 2D\n   */\n  // Create engine object\n  var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n  engine.canvas.resizeByClientSize();\n  var scene = engine.sceneManager.activeScene;\n  var rootEntity = scene.createRootEntity(); // Create camera\n\n  var cameraEntity = rootEntity.createChild(\"Camera\");\n  cameraEntity.transform.position = new _oasisEngine.Vector3(0, 0, 20);\n  cameraEntity.addComponent(_oasisEngine.Camera).isOrthographic = true;\n  engine.resourceManager.load({\n    url: \"https://gw.alipayobjects.com/mdn/rms_7c464e/afts/img/A*L2GNRLWn9EAAAAAAAAAAAAAAARQnAQ\",\n    type: _oasisEngine.AssetType.Texture2D\n  }).then(function (texture) {\n    // Create origin sprite entity.\n    var texSize = new _oasisEngine.Vector2(texture.width, texture.height);\n    var spriteEntity = rootEntity.createChild(\"spriteBlur\");\n    spriteEntity.addComponent(_oasisEngine.SpriteRenderer).sprite = new _oasisEngine.Sprite(engine, texture); // The blur algorithm will sample the edges of the texture.\n    // Set the clamp warp mode to avoid mis-sampling caused by repeate warp mode.\n\n    texture.wrapModeU = texture.wrapModeV = _oasisEngine.TextureWrapMode.Clamp; // Display normal\n\n    addCustomMaterialSpriteEntity(spriteEntity, -7.5, texSize, 0.0); // Display low blur\n\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), -2.5, texSize, 1.0); // Display moderate blur\n\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), 2.5, texSize, 2.0); // Display highly blur\n\n    addCustomMaterialSpriteEntity(spriteEntity.clone(), 7.5, texSize, 3.0);\n  });\n  engine.run();\n\n  function addCustomMaterialSpriteEntity(entity, posX, texSize, blurSize) {\n    rootEntity.addChild(entity);\n    entity.transform.setPosition(posX, 0, 0); // Create material\n\n    var material = new _oasisEngine.Material(engine, _oasisEngine.Shader.find(\"SpriteBlur\"));\n    entity.getComponent(_oasisEngine.SpriteRenderer).setMaterial(material); // Init state\n\n    var target = material.renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = _oasisEngine.BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = _oasisEngine.BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = _oasisEngine.BlendFactor.One;\n    target.destinationAlphaBlendFactor = _oasisEngine.BlendFactor.OneMinusSourceAlpha;\n    target.colorBlendOperation = target.alphaBlendOperation = _oasisEngine.BlendOperation.Add;\n    material.renderState.depthState.writeEnabled = false;\n    material.renderQueueType = _oasisEngine.RenderQueueType.Transparent;\n    material.renderState.rasterState.cullMode = _oasisEngine.CullMode.Off; // Set uniform\n\n    material.shaderData.setVector2(\"u_texSize\", texSize);\n    material.shaderData.setFloat(\"u_blurSize\", blurSize);\n  } // Custom shader\n\n\n  var spriteVertShader = \"\\n  precision highp float;\\n\\n  uniform mat4 u_VPMat;\\n\\n  attribute vec3 POSITION;\\n  attribute vec2 TEXCOORD_0;\\n  attribute vec4 COLOR_0;\\n\\n  varying vec4 v_color;\\n  varying vec2 v_uv;\\n\\n  void main()\\n  {\\n    gl_Position = u_VPMat * vec4(POSITION, 1.0);\\n    v_color = COLOR_0;\\n    v_uv = TEXCOORD_0;\\n  }\\n\";\n  var spriteFragmentShader = \"\\n  precision mediump float;\\n  precision mediump int;\\n\\n  uniform sampler2D u_spriteTexture;\\n  uniform float u_blurSize;\\n  uniform vec2 u_texSize;\\n\\n  varying vec2 v_uv;\\n  varying vec4 v_color;\\n\\n  float normpdf(float x, float sigma) {\\n    return 0.39894 * exp(-0.5 * x * x / (sigma * sigma)) / sigma;\\n  }\\n\\n  void main() {\\n    vec4 color = texture2D(u_spriteTexture, v_uv);\\n    const int mSize = 11;\\n    const int kSize = (mSize - 1) / 2;\\n    float kernel[mSize];\\n    vec3 final_colour = vec3(0.0);\\n\\n    // create the 1-D kernel\\n    float sigma = 7.0;\\n    float Z = 0.0;\\n    for (int i = 0; i <= kSize; ++i) {\\n      kernel[kSize+i] = kernel[kSize - i] = normpdf(float(i), sigma);\\n    }\\n\\n    // get the normalization factor (as the gaussian has been clamped)\\n    for (int i = 0; i < mSize; ++i) {\\n      Z += kernel[i];\\n    }\\n\\n    // read out the texels\\n    float offsetX = u_blurSize / u_texSize.x;\\n    float offsetY = u_blurSize / u_texSize.y;\\n    vec2 uv;\\n    for (int i = -kSize; i <= kSize; ++i) {\\n      for (int j = -kSize; j <= kSize; ++j) {\\n        uv = v_uv.xy + vec2(float(i) * offsetX, float(j) * offsetY);\\n        final_colour += kernel[kSize + j] * kernel[kSize + i] * texture2D(u_spriteTexture, uv).rgb;\\n      }\\n    }\\n\\n    gl_FragColor = vec4(final_colour / (Z * Z), color.a) * v_color;\\n  }\\n\";\n\n  _oasisEngine.Shader.create(\"SpriteBlur\", spriteVertShader, spriteFragmentShader);\n});"},"name":"sprite-material-blur","id":"a5b9313d-34bc-54ea-b1a9-c4bcecffff80"}}},"staticQueryHashes":[]}