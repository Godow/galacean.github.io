{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.8/playground/physx-joint-basic","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\", \"@oasis-engine/physics-physx\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"), require(\"@oasis-engine/physics-physx\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine, global[\"@oasisEngine/physicsPhysx\"]);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine, _physicsPhysx) {\n  \"use strict\";\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function createText(rootEntity, pos, fontSize) {\n    // Create text entity\n    var entity = rootEntity.createChild(\"text\");\n    entity.transform.position = pos; // Add text renderer for text entity\n\n    var renderer = entity.addComponent(_oasisEngine.TextRenderer); // Set text color\n\n    renderer.color = new _oasisEngine.Color(); // Set text to render\n\n    renderer.text = \"Click Mouse to Shoot balls\"; // Set font with font family\n\n    renderer.font = _oasisEngine.Font.createFromOS(entity.engine, \"Arial\"); // Set font size\n\n    renderer.fontSize = fontSize;\n  }\n\n  function addBox(rootEntity, size, position, rotation) {\n    var mtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    mtl.baseColor.set(Math.random(), Math.random(), Math.random(), 1.0);\n    var boxEntity = rootEntity.createChild();\n    var renderer = boxEntity.addComponent(_oasisEngine.MeshRenderer);\n    renderer.mesh = _oasisEngine.PrimitiveMesh.createCuboid(rootEntity.engine, size.x, size.y, size.z);\n    renderer.setMaterial(mtl);\n    boxEntity.transform.position = position;\n    boxEntity.transform.rotationQuaternion = rotation;\n    var physicsBox = new _oasisEngine.BoxColliderShape();\n    physicsBox.size = size;\n    var boxCollider = boxEntity.addComponent(_oasisEngine.DynamicCollider);\n    boxCollider.addShape(physicsBox);\n    return boxEntity;\n  }\n\n  function transform(position, rotation, outPosition, outRotation) {\n    _oasisEngine.Quaternion.multiply(rotation, outRotation, outRotation);\n\n    _oasisEngine.Vector3.transformByQuat(outPosition, rotation, outPosition);\n\n    outPosition.add(position);\n  }\n\n  function createChain(rootEntity, position, rotation, length, separation) {\n    var offset = new _oasisEngine.Vector3();\n    var prevCollider = null;\n\n    for (var i = 0; i < length; i++) {\n      var localPosition = new _oasisEngine.Vector3(0, -separation / 2 * (2 * i + 1), 0);\n      var localQuaternion = new _oasisEngine.Quaternion();\n      transform(position, rotation, localPosition, localQuaternion);\n      var currentEntity = addBox(rootEntity, new _oasisEngine.Vector3(2.0, 2.0, 0.5), localPosition, localQuaternion);\n      var currentCollider = currentEntity.getComponent(_oasisEngine.DynamicCollider);\n      var fixedJoint = currentEntity.addComponent(_oasisEngine.FixedJoint);\n\n      if (prevCollider !== null) {\n        _oasisEngine.Vector3.subtract(currentEntity.transform.worldPosition, prevCollider.entity.transform.worldPosition, offset);\n\n        fixedJoint.connectedAnchor = offset;\n        fixedJoint.connectedCollider = prevCollider;\n      } else {\n        fixedJoint.connectedAnchor = position;\n      }\n\n      prevCollider = currentCollider;\n    }\n  }\n\n  function createSpring(rootEntity, position, rotation) {\n    var currentEntity = addBox(rootEntity, new _oasisEngine.Vector3(2, 2, 1), position, rotation);\n    var springJoint = currentEntity.addComponent(_oasisEngine.SpringJoint);\n    springJoint.connectedAnchor = position;\n    springJoint.swingOffset = new _oasisEngine.Vector3(0, 1, 0);\n    springJoint.maxDistance = 2;\n    springJoint.stiffness = 0.2;\n    springJoint.damping = 1;\n  }\n\n  function createHinge(rootEntity, position, rotation) {\n    var currentEntity = addBox(rootEntity, new _oasisEngine.Vector3(4.0, 4.0, 0), position, rotation);\n    var hingeJoint = currentEntity.addComponent(_oasisEngine.HingeJoint);\n    hingeJoint.connectedAnchor = position;\n    hingeJoint.swingOffset = new _oasisEngine.Vector3(0, 1, 0);\n    hingeJoint.axis = new _oasisEngine.Vector3(0, 1, 0);\n  }\n\n  function addSphere(rootEntity, radius, position, rotation, velocity) {\n    var mtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    mtl.baseColor.set(Math.random(), Math.random(), Math.random(), 1.0);\n    var sphereEntity = rootEntity.createChild();\n    var renderer = sphereEntity.addComponent(_oasisEngine.MeshRenderer);\n    renderer.mesh = _oasisEngine.PrimitiveMesh.createSphere(rootEntity.engine, radius);\n    renderer.setMaterial(mtl);\n    sphereEntity.transform.position = position;\n    sphereEntity.transform.rotationQuaternion = rotation;\n    var physicsSphere = new _oasisEngine.SphereColliderShape();\n    physicsSphere.radius = radius;\n    var sphereCollider = sphereEntity.addComponent(_oasisEngine.DynamicCollider);\n    sphereCollider.addShape(physicsSphere);\n    sphereCollider.linearVelocity = velocity;\n    sphereCollider.angularDamping = 0.5;\n    return sphereEntity;\n  }\n\n  var ShootScript = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(ShootScript, _Script);\n\n    function ShootScript() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Script.call.apply(_Script, [this].concat(args)) || this;\n      _this.ray = new _oasisEngine.Ray();\n      _this.position = new _oasisEngine.Vector3();\n      _this.rotation = new _oasisEngine.Quaternion();\n      _this.camera = void 0;\n      return _this;\n    }\n\n    var _proto = ShootScript.prototype;\n\n    _proto.onAwake = function onAwake() {\n      this.camera = this.entity.getComponent(_oasisEngine.Camera);\n    };\n\n    _proto.onUpdate = function onUpdate(deltaTime) {\n      var ray = this.ray;\n      var inputManager = this.engine.inputManager;\n\n      if (inputManager.isPointerDown(_oasisEngine.PointerButton.Primary)) {\n        this.camera.screenPointToRay(inputManager.pointerPosition, ray);\n        ray.direction.scale(50);\n        addSphere(this.entity, 0.5, this.position, this.rotation, ray.direction);\n      }\n    };\n\n    return ShootScript;\n  }(_oasisEngine.Script); //----------------------------------------------------------------------------------------------------------------------\n\n\n  _physicsPhysx.PhysXPhysics.initialize().then(function () {\n    var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n    engine.physicsManager.initialize(_physicsPhysx.PhysXPhysics);\n    engine.canvas.resizeByClientSize();\n    var scene = engine.sceneManager.activeScene;\n    var rootEntity = scene.createRootEntity(\"root\");\n    scene.ambientLight.diffuseSolidColor.set(0.5, 0.5, 0.5, 1);\n    createText(rootEntity, new _oasisEngine.Vector3(-5, 5), 50);\n    createChain(rootEntity, new _oasisEngine.Vector3(8.0, 10.0, 0.0), new _oasisEngine.Quaternion(), 10, 2.0);\n    createSpring(rootEntity, new _oasisEngine.Vector3(-4.0, 4.0, 1.0), new _oasisEngine.Quaternion());\n    createHinge(rootEntity, new _oasisEngine.Vector3(0, 0, 0), new _oasisEngine.Quaternion()); // init camera\n\n    var cameraEntity = rootEntity.createChild(\"camera\");\n    cameraEntity.addComponent(_oasisEngine.Camera);\n    cameraEntity.transform.setPosition(3, 1, 22);\n    cameraEntity.transform.lookAt(new _oasisEngine.Vector3(3, 1, 0));\n    cameraEntity.addComponent(ShootScript); // init direct light\n\n    var light = rootEntity.createChild(\"light\");\n    light.transform.setPosition(-10, 10, 10);\n    light.transform.lookAt(new _oasisEngine.Vector3());\n    light.addComponent(_oasisEngine.DirectLight); // Run engine\n\n    engine.run();\n  });\n});"},"name":"physx-joint-basic","id":"9a49de9b-0456-5b67-bb46-f9ef726273bc"}}},"staticQueryHashes":[]}