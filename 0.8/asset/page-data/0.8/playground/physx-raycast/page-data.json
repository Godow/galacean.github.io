{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.8/playground/physx-raycast","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\", \"@oasis-engine-toolkit/controls\", \"@oasis-engine/physics-physx\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"), require(\"@oasis-engine-toolkit/controls\"), require(\"@oasis-engine/physics-physx\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine, global[\"@oasisEngineToolkit/controls\"], global[\"@oasisEngine/physicsPhysx\"]);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine, _controls, _physicsPhysx) {\n  \"use strict\";\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var GeometryGenerator = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(GeometryGenerator, _Script);\n\n    function GeometryGenerator() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Script.call.apply(_Script, [this].concat(args)) || this;\n      _this.quat = void 0;\n      return _this;\n    }\n\n    var _proto = GeometryGenerator.prototype;\n\n    _proto.onAwake = function onAwake() {\n      this.quat = new _oasisEngine.Quaternion(0, 0, 0.3, 0.7);\n      this.quat.normalize();\n    };\n\n    _proto.onUpdate = function onUpdate(deltaTime) {\n      var quat = this.quat;\n      var inputManager = this.engine.inputManager;\n\n      if (inputManager.isPointerDown(_oasisEngine.PointerButton.Secondary)) {\n        if (Math.random() > 0.5) {\n          addSphere(this.entity, 0.5, new _oasisEngine.Vector3(Math.floor(Math.random() * 6) - 2.5, 5, Math.floor(Math.random() * 6) - 2.5), quat);\n        } else {\n          addCapsule(this.entity, 0.5, 2.0, new _oasisEngine.Vector3(Math.floor(Math.random() * 6) - 2.5, 5, Math.floor(Math.random() * 6) - 2.5), quat);\n        }\n      }\n    };\n\n    return GeometryGenerator;\n  }(_oasisEngine.Script);\n\n  var Raycast = /*#__PURE__*/function (_Script2) {\n    _inheritsLoose(Raycast, _Script2);\n\n    function Raycast() {\n      var _this2;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this2 = _Script2.call.apply(_Script2, [this].concat(args)) || this;\n      _this2.camera = void 0;\n      _this2.ray = new _oasisEngine.Ray();\n      _this2.hit = new _oasisEngine.HitResult();\n      return _this2;\n    }\n\n    var _proto2 = Raycast.prototype;\n\n    _proto2.onAwake = function onAwake() {\n      this.camera = this.entity.getComponent(_oasisEngine.Camera);\n    };\n\n    _proto2.onUpdate = function onUpdate(deltaTime) {\n      var engine = this.engine;\n      var ray = this.ray;\n      var hit = this.hit;\n      var inputManager = this.engine.inputManager;\n\n      if (inputManager.isPointerDown(_oasisEngine.PointerButton.Primary)) {\n        this.camera.screenPointToRay(inputManager.pointerPosition, ray);\n        var result = engine.physicsManager.raycast(ray, Number.MAX_VALUE, _oasisEngine.Layer.Layer0, hit);\n\n        if (result) {\n          var mtl = new _oasisEngine.BlinnPhongMaterial(engine);\n          var color = mtl.baseColor;\n          color.r = Math.random();\n          color.g = Math.random();\n          color.b = Math.random();\n          color.a = 1.0;\n          var meshes = [];\n          hit.entity.getComponentsIncludeChildren(_oasisEngine.MeshRenderer, meshes);\n          meshes.forEach(function (mesh) {\n            mesh.setMaterial(mtl);\n          });\n        }\n      }\n    };\n\n    return Raycast;\n  }(_oasisEngine.Script); // init scene\n\n\n  function init(rootEntity) {\n    var quat = new _oasisEngine.Quaternion(0, 0, 0.3, 0.7);\n    quat.normalize();\n    addPlane(rootEntity, new _oasisEngine.Vector3(30, 0.1, 30), new _oasisEngine.Vector3(), new _oasisEngine.Quaternion()); // eslint-disable-next-line no-plusplus\n\n    for (var i = 0; i < 8; i++) {\n      // eslint-disable-next-line no-plusplus\n      for (var j = 0; j < 8; j++) {\n        var random = Math.floor(Math.random() * 3) % 3;\n\n        switch (random) {\n          case 0:\n            addBox(rootEntity, new _oasisEngine.Vector3(1, 1, 1), new _oasisEngine.Vector3(-2.5 + i + 0.1 * i, Math.floor(Math.random() * 6) + 1, -2.5 + j + 0.1 * j), quat);\n            break;\n\n          case 1:\n            addSphere(rootEntity, 0.5, new _oasisEngine.Vector3(Math.floor(Math.random() * 16) - 2.5, 5, Math.floor(Math.random() * 16) - 2.5), quat);\n            break;\n\n          case 2:\n            addCapsule(rootEntity, 0.5, 2.0, new _oasisEngine.Vector3(Math.floor(Math.random() * 16) - 2.5, 5, Math.floor(Math.random() * 16) - 2.5), quat);\n            break;\n\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  function addPlane(rootEntity, size, position, rotation) {\n    var mtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    mtl.baseColor.set(0.03179807202597362, 0.3939682161541871, 0.41177952549087604, 1);\n    var planeEntity = rootEntity.createChild();\n    planeEntity.layer = _oasisEngine.Layer.Layer1;\n    var renderer = planeEntity.addComponent(_oasisEngine.MeshRenderer);\n    renderer.mesh = _oasisEngine.PrimitiveMesh.createCuboid(rootEntity.engine, size.x, size.y, size.z);\n    renderer.setMaterial(mtl);\n    planeEntity.transform.position = position;\n    planeEntity.transform.rotationQuaternion = rotation;\n    var physicsPlane = new _oasisEngine.PlaneColliderShape();\n    physicsPlane.setPosition(0, size.y, 0);\n    var planeCollider = planeEntity.addComponent(_oasisEngine.StaticCollider);\n    planeCollider.addShape(physicsPlane);\n    return planeEntity;\n  }\n\n  function addBox(rootEntity, size, position, rotation) {\n    var mtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    mtl.baseColor.set(Math.random(), Math.random(), Math.random(), 1.0);\n    var boxEntity = rootEntity.createChild();\n    var renderer = boxEntity.addComponent(_oasisEngine.MeshRenderer);\n    renderer.mesh = _oasisEngine.PrimitiveMesh.createCuboid(rootEntity.engine, size.x, size.y, size.z);\n    renderer.setMaterial(mtl);\n    boxEntity.transform.position = position;\n    boxEntity.transform.rotationQuaternion = rotation;\n    var physicsBox = new _oasisEngine.BoxColliderShape();\n    physicsBox.size = size;\n    physicsBox.isTrigger = false;\n    var boxCollider = boxEntity.addComponent(_oasisEngine.DynamicCollider);\n    boxCollider.addShape(physicsBox);\n    return boxEntity;\n  }\n\n  function addSphere(rootEntity, radius, position, rotation) {\n    var mtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    mtl.baseColor.set(Math.random(), Math.random(), Math.random(), 1.0);\n    var sphereEntity = rootEntity.createChild();\n    var renderer = sphereEntity.addComponent(_oasisEngine.MeshRenderer);\n    renderer.mesh = _oasisEngine.PrimitiveMesh.createSphere(rootEntity.engine, radius);\n    renderer.setMaterial(mtl);\n    sphereEntity.transform.position = position;\n    sphereEntity.transform.rotationQuaternion = rotation;\n    var physicsSphere = new _oasisEngine.SphereColliderShape();\n    physicsSphere.radius = radius;\n    var sphereCollider = sphereEntity.addComponent(_oasisEngine.DynamicCollider);\n    sphereCollider.addShape(physicsSphere);\n    return sphereEntity;\n  }\n\n  function addCapsule(rootEntity, radius, height, position, rotation) {\n    var mtl = new _oasisEngine.BlinnPhongMaterial(rootEntity.engine);\n    mtl.baseColor.set(Math.random(), Math.random(), Math.random(), 1.0);\n    var capsuleEntity = rootEntity.createChild();\n    var renderer = capsuleEntity.addComponent(_oasisEngine.MeshRenderer);\n    renderer.mesh = _oasisEngine.PrimitiveMesh.createCapsule(rootEntity.engine, radius, height, 20);\n    renderer.setMaterial(mtl);\n    capsuleEntity.transform.position = position;\n    capsuleEntity.transform.rotationQuaternion = rotation;\n    var physicsCapsule = new _oasisEngine.CapsuleColliderShape();\n    physicsCapsule.radius = radius;\n    physicsCapsule.height = height;\n    var capsuleCollider = capsuleEntity.addComponent(_oasisEngine.DynamicCollider);\n    capsuleCollider.addShape(physicsCapsule);\n    return capsuleEntity;\n  } //----------------------------------------------------------------------------------------------------------------------\n\n\n  _physicsPhysx.PhysXPhysics.initialize().then(function () {\n    var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n    engine.physicsManager.initialize(_physicsPhysx.PhysXPhysics);\n    engine.canvas.resizeByClientSize();\n    var scene = engine.sceneManager.activeScene;\n    var rootEntity = scene.createRootEntity();\n    rootEntity.addComponent(GeometryGenerator); // init camera\n\n    var cameraEntity = rootEntity.createChild(\"camera\");\n    cameraEntity.addComponent(_oasisEngine.Camera);\n    var pos = cameraEntity.transform.position;\n    pos.set(20, 20, 20);\n    cameraEntity.transform.lookAt(new _oasisEngine.Vector3());\n    cameraEntity.addComponent(_controls.OrbitControl);\n    cameraEntity.addComponent(Raycast);\n    var entity = cameraEntity.createChild(\"text\");\n    entity.transform.position = new _oasisEngine.Vector3(0, 3.5, -10);\n    var renderer = entity.addComponent(_oasisEngine.TextRenderer);\n    renderer.color = new _oasisEngine.Color();\n    renderer.text = \"Use mouse to click the entity\";\n    renderer.font = _oasisEngine.Font.createFromOS(entity.engine, \"Arial\");\n    renderer.fontSize = 40; // init light\n\n    scene.ambientLight.diffuseSolidColor.set(0.5, 0.5, 0.5, 1); // init directional light\n\n    var light = rootEntity.createChild(\"light\");\n    light.transform.setPosition(0.3, 1, 0.4);\n    light.transform.lookAt(new _oasisEngine.Vector3(0, 0, 0));\n    light.addComponent(_oasisEngine.DirectLight);\n    init(rootEntity);\n    engine.run();\n  });\n});"},"name":"physx-raycast","id":"2c10317f-af4a-5270-b6aa-68005ea43397"}}},"staticQueryHashes":[]}