{"componentChunkName":"component---src-templates-playground-tsx","path":"/0.8/playground/lite-raycast","result":{"pageContext":{"node":{"internal":{"content":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"oasis-engine\", \"@oasis-engine-toolkit/controls\", \"@oasis-engine/physics-lite\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"oasis-engine\"), require(\"@oasis-engine-toolkit/controls\"), require(\"@oasis-engine/physics-lite\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.oasisEngine, global[\"@oasisEngineToolkit/controls\"], global[\"@oasisEngine/physicsLite\"]);\n    global.index = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_oasisEngine, _controls, _physicsLite) {\n  \"use strict\";\n\n  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var Raycast = /*#__PURE__*/function (_Script) {\n    _inheritsLoose(Raycast, _Script);\n\n    function Raycast() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Script.call.apply(_Script, [this].concat(args)) || this;\n      _this.camera = void 0;\n      _this.pickedMeshRenderer = void 0;\n      _this.originalColor = new _oasisEngine.Color();\n      _this.point = new _oasisEngine.Vector2();\n      _this.ray = new _oasisEngine.Ray();\n      _this.hit = new _oasisEngine.HitResult();\n      return _this;\n    }\n\n    var _proto = Raycast.prototype;\n\n    _proto.onAwake = function onAwake() {\n      this.camera = this.entity.getComponent(_oasisEngine.Camera);\n    };\n\n    _proto.onUpdate = function onUpdate(deltaTime) {\n      var engine = this.engine;\n      var ray = this.ray;\n      var hit = this.hit;\n      var originalColor = this.originalColor;\n      var inputManager = this.engine.inputManager;\n\n      if (inputManager.isPointerDown(_oasisEngine.PointerButton.Primary)) {\n        this.camera.screenPointToRay(inputManager.pointerPosition, ray);\n        var result = engine.physicsManager.raycast(ray, Number.MAX_VALUE, _oasisEngine.Layer.Everything, hit);\n\n        if (result) {\n          this.pickedMeshRenderer = hit.entity.getComponent(_oasisEngine.MeshRenderer);\n          var material = this.pickedMeshRenderer.getMaterial();\n          originalColor.copyFrom(material.baseColor);\n          material.baseColor.set(0.3, 0.3, 0.3, 1.0);\n        }\n      }\n\n      if (this.pickedMeshRenderer && inputManager.isPointerUp(_oasisEngine.PointerButton.Primary)) {\n        this.pickedMeshRenderer.getMaterial().baseColor = originalColor;\n      }\n    };\n\n    return Raycast;\n  }(_oasisEngine.Script);\n\n  var engine = new _oasisEngine.WebGLEngine(\"canvas\");\n  engine.physicsManager.initialize(_physicsLite.LitePhysics);\n  engine.canvas.resizeByClientSize();\n  var scene = engine.sceneManager.activeScene;\n  var rootEntity = scene.createRootEntity(\"root\");\n  scene.ambientLight.diffuseSolidColor.set(1, 1, 1, 1);\n  scene.ambientLight.diffuseIntensity = 1.2; // init camera\n\n  var cameraEntity = rootEntity.createChild(\"camera\");\n  cameraEntity.addComponent(_oasisEngine.Camera);\n  cameraEntity.transform.setPosition(10, 10, 10);\n  cameraEntity.addComponent(_controls.OrbitControl);\n  cameraEntity.addComponent(Raycast);\n  var entity = cameraEntity.createChild(\"text\");\n  entity.transform.position = new _oasisEngine.Vector3(0, 3.5, -10);\n  var renderer = entity.addComponent(_oasisEngine.TextRenderer);\n  renderer.color = new _oasisEngine.Color();\n  renderer.text = \"Use mouse to click the entity\";\n  renderer.font = _oasisEngine.Font.createFromOS(entity.engine, \"Arial\");\n  renderer.fontSize = 40; // init point light\n\n  var lightEntity = rootEntity.createChild(\"light\");\n  lightEntity.transform.setPosition(0, 3, 0);\n  var pointLight = lightEntity.addComponent(_oasisEngine.PointLight);\n  pointLight.intensity = 0.3; // create sphere test entity\n\n  var radius = 1.25;\n  var sphereEntity = rootEntity.createChild(\"SphereEntity\");\n  sphereEntity.transform.setPosition(-3, 0, 0);\n  var sphereMtl = new _oasisEngine.BlinnPhongMaterial(engine);\n  var sphereRenderer = sphereEntity.addComponent(_oasisEngine.MeshRenderer);\n  sphereMtl.baseColor.set(0.7, 0.1, 0.1, 1.0);\n  sphereRenderer.mesh = _oasisEngine.PrimitiveMesh.createSphere(engine, radius);\n  sphereRenderer.setMaterial(sphereMtl);\n  var sphereCollider = sphereEntity.addComponent(_oasisEngine.StaticCollider);\n  var sphereColliderShape = new _oasisEngine.SphereColliderShape();\n  sphereColliderShape.radius = radius;\n  sphereCollider.addShape(sphereColliderShape); // create box test entity\n\n  var cubeSize = 2.0;\n  var boxEntity = rootEntity.createChild(\"BoxEntity\");\n  var boxMtl = new _oasisEngine.BlinnPhongMaterial(engine);\n  var boxRenderer = boxEntity.addComponent(_oasisEngine.MeshRenderer);\n  boxMtl.baseColor.set(0.1, 0.7, 0.1, 1.0);\n  boxRenderer.mesh = _oasisEngine.PrimitiveMesh.createCuboid(engine, cubeSize, cubeSize, cubeSize);\n  boxRenderer.setMaterial(boxMtl);\n  var boxCollider = boxEntity.addComponent(_oasisEngine.StaticCollider);\n  var boxColliderShape = new _oasisEngine.BoxColliderShape();\n  boxColliderShape.setSize(cubeSize, cubeSize, cubeSize);\n  boxCollider.addShape(boxColliderShape); // Run engine\n\n  engine.run();\n});"},"name":"lite-raycast","id":"99800eb0-b89d-5179-86e6-c1a0e4051ffd"}}},"staticQueryHashes":[]}